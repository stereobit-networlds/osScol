/*
-----------------------------------------------------------------------------

Copyright (c) 2014 stereobit

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA, or go to
http://www.gnu.org/copyleft/lesser.txt

-----------------------------------------------------------------------------
*/

/*
  Version : 1.0
  First version : 05/09/2010
  Author : stereobit
*/

typeof port = S;;
typeof speed = S;;
typeof bytesize = S;;
typeof parity = S;;
typeof stopbits = S;;
typeof lastchar = S;;
typeof refresh = S;;

typeof slastchar = S;; /*holds string last char */
typeof myUI=UserI;;

typeof sno = I;;	   
typeof nsno = S;;
typeof sesfile = S;;
typeof sesdata = [[S r1] r1];;

typeof diary = [[S S] r1];;
typeof items = [[S I] r1];;
defcom CaddItem=addItem S;;
defcom CdelItem=delItem S;;
defcom CgetItem=getItem S;;

typeof timer = Timer;;

var serialCheck = 10000;;   /*is ob param.. check every n seconds for serial data */
var iniPath="locked/conf/stereobit/";;
var log=1;;
var sesfname = "session_";;

typeof iospeed = ObjText;;
typeof iobytesize = ObjText;;
typeof ioparity = ObjText;;
typeof iostopbits = ObjText;;
typeof iolastchar = ObjText;;
typeof iorefresh = ObjText;;


fun getSessionParam(line, word) = 
  let nth_list sesdata (line-1) -> l in 
  nth_list l (word-1);;  

fun sessionpath() = 
  strcatn iniPath::DMSname::"/"::(nsno)::"/"::nil;;
  
fun getSessionData() = 
   let strcatn sesfname::(itoa sno)::".txt"::nil -> ses in
   let strcat sessionpath ses -> sesfile in
   strextr _getpack _checkpack sesfile
;;  

fun saveLog(fname, s)=
 if (log==1) then
 (
    let strcatn (sessionpath)::fname::nil -> logBuf in
    let ctime time -> t in
    let strcatn t::" "::s::"\n"::nil -> sw in
 
	let _appendpack sw _getmodifypack logBuf -> append in
	if (append==-1) then
		_createpack sw _getmodifypack logBuf
	else nil
 )
 else nil;;

fun _echo(x,s)= 
_DMSevent this "hear" strcat strcat ">> " x "\n" nil;;

fun replace_in_list (list, old, new)=
 if list==nil then nil
 else
  let list -> [first next] in
   (if !strcmp first old
    then new::next        
    else first::replace_in_list next old new);;

/*local client inventory - updated when server say ok*/	
	
fun _searchInventory(i, item) =
  if (i==nil) then 
    nil
  else
    let hd i -> [n qty] in
	if (!strcmpi n item) then
	  qty
	else
	  _searchInventory tl i item;;
	  
fun insert_to_items(i, item, c)=
  if i==nil
  then
    nil
  else
    let hd i -> [n qty] in
    if !strcmpi n item then
    ( /*[n (qty+c)]::insert_to_items tl i item c*/
	  mutate hd i <- [_ (qty+c)];
	  1
	)  
    else
      /*(hd i)::insert_to_items tl i item c;;*/
	  insert_to_items tl i item c;;

fun addInventory(item,counter)=
  /*let _searchInventory items item -> exist in*/
  
  let if counter==nil then 1 else counter -> cn in
  let insert_to_items items item cn -> exist in
  if (exist==nil) then   
	set items = [item cn]::items
  else
    nil;;  
  
fun remove_from_items(i, item, c)=
  if i==nil
  then
    nil
  else
    let hd i -> [n qty] in
    if !strcmpi n item then
	(
      if (qty-c <= 0) then 
	    tl i 
      else
        [n (qty-c)]::remove_from_items tl i item c
	)
	else
	  (hd i)::remove_from_items tl i item c;;  

fun delInventory(item,counter)=
  let if counter==nil then 1 else counter -> cn in
  set items = remove_from_items items item cn;
  0;;
  
fun _items2text(l,text)=
  if l==nil then
    text
  else
    let hd l -> [item qty] in
    let strcatn item::" "::(itoa qty)::"\n"::nil -> line in	
	let strcat text line -> text in
	_items2text tl l text;;  

fun _saveInventory() =
  let strcatn iniPath::DMSname::"/inventory.log"::nil -> itemsfile in
  let _items2text items nil -> itm in
  /*_storepack itm diaryfile; //..reset old file when _loadDiary*/
  let _appendpack itm _getmodifypack itemsfile -> append in
  if (append==-1) then
	_createpack itm _getmodifypack itemsfile
  else nil;	
0;;  
  
/* server call for updating ob item struct */ 
fun _addItem(i)=
  _DMSsend this CaddItem [i];;  
  
fun _delItem(i)=
  _DMSsend this CdelItem [i];;  
  
  
/*diary log -  img clicks and events, items some of them */
fun _diary2text(l,text)=
  if l==nil then
    text
  else
    let hd l -> [t d] in
    let strcatn t::" "::d::"\n"::nil -> line in	
	let strcat text line -> text in
	_diary2text tl l text;;

fun _saveDiary() =
  let strcatn iniPath::DMSname::"/diary.log"::nil -> diaryfile in
  let _diary2text diary nil -> sd in
  /*_storepack sd diaryfile; //..reset old file when _loadDiary*/
  let _appendpack sd _getmodifypack diaryfile -> append in
  if (append==-1) then
	_createpack sd _getmodifypack diaryfile
  else nil;	
0;;

fun _loadDiary() =
0;;

fun _setDiary(param) =
  let [(itoa time) param] -> d in
  (
    /*add item in mem when param start with item_ */
    if (!strcmpi "item_" substr param 0 5) then 
      _addItem param
    else	
      0;
	  
    set diary = d::diary;	  
  0);;

fun _findDiary(diary, param) =
  if (diary==nil) then 
    nil
  else
    let hd diary -> [t d] in
	if (!strcmpi param d) then
	  1
	else
	  _findDiary tl diary param;;
	  
fun remove_from_diary(l, param)=
  if l==nil
  then
    nil
  else
    let hd l -> [t d] in
    if !strcmpi d param then
      tl l
    else
      (hd l)::remove_from_diary tl l param;;	  

fun _delDiary(param) =

  /*add utem in mem when param start with item_ */
  if (!strcmpi "item_" substr param 0 5) then 
    _delItem param
  else	
    0;
	
  set diary = remove_from_diary diary param;
  0;;

/*future actions based on diary history ...*/  
fun _actDiary() =
  0;;  

fun _saveComPort(b, c)=
  let strcatn iniPath::DMSname::"/diary.ini"::nil -> comfile in   
  let _GETcombo c -> [i s] in  
  let itoa i -> comport in
  let _GETtext iospeed -> speed in
  let _GETtext iobytesize -> bytesize in
  let _GETtext ioparity -> parity in
  let _GETtext iostopbits -> stopbits in
  let _GETtext iolastchar -> lastchar in
  let _GETtext iorefresh -> refresh in
  let strcatn comport::"\n"::speed::"\n"::bytesize::"\n"::parity::"\n"::stopbits::"\n"::lastchar::"\n"::refresh::nil -> iodata in 
  (
    _storepack iodata comfile;
    0
  );;

fun _endComPort(w, u)=
  _DSwindow w;
  0;;
  
fun _closeComPort(b, w)=
  _endComPort w 0;;  

fun configComPort()= /*from, action, param, reply, p)=*/
  let strcatn iniPath::DMSname::"/diary.ini"::nil -> comfile in
  let _getpack _checkpack comfile -> comSettings in 
  let if (comSettings!=nil) then (lineextr comSettings) else nil -> comParams in
  //let hd params -> comParams in

  let _CRwindow _channel DMSwin 200 200 350 250 WN_MENU "Com port configuration" -> winComConfig in
  let _GETwindowPositionSize winComConfig -> [x y w h] in
  (
   _CRtext _channel winComConfig 5 5 w-10 40 ET_ALIGN_LEFT|ET_BORDER (_loc this "_ConfigComPort" nil);
   _CRtext _channel winComConfig 5 50 70 20 ET_ALIGN_LEFT "Port:";
   let _CRcombo _channel winComConfig 80 50 70 200 CB_NOEDIT|CB_DOWN "..." -> comboKey in
   (
    _ADDcombo comboKey 0 "Com 0";
    _ADDcombo comboKey 1 "Com 1";
    _ADDcombo comboKey 2 "Com 2";
    _ADDcombo comboKey 3 "Com 3";
    _ADDcombo comboKey 4 "Com 4";
    _ADDcombo comboKey 5 "Com 5";
    _ADDcombo comboKey 6 "Com 6";
    _ADDcombo comboKey 7 "Com 7";
    _ADDcombo comboKey 8 "Com 8";
	
	let if (comSettings!=nil) then (nth_list comParams 0) else "1" -> selection in
    _SELcombo comboKey (atoi selection); //0;
	
	_CRtext _channel winComConfig 5 75 70 20 ET_ALIGN_LEFT "Speed:";
	let if (comSettings!=nil) then (nth_list comParams 1) else "9600" -> serialiospeed in	
	set iospeed = _CReditLine _channel winComConfig 80 75 w-85 20 ET_DOWN serialiospeed;
	
	_CRtext _channel winComConfig 5 100 70 20 ET_ALIGN_LEFT "Byte size:";
	let if (comSettings!=nil) then (nth_list comParams 2) else "8" -> serialiobsize in	
	set iobytesize = _CReditLine _channel winComConfig 80 100 w-85 20 ET_DOWN serialiobsize;
	
	_CRtext _channel winComConfig 5 125 70 20 ET_ALIGN_LEFT "Parity:";
	let if (comSettings!=nil) then (nth_list comParams 3) else "NONE" -> serialioparity in	
	set ioparity = _CReditLine _channel winComConfig 80 125 w-85 20 ET_DOWN serialioparity;
	
	_CRtext _channel winComConfig 5 150 70 20 ET_ALIGN_LEFT "Stop Bits:";
	let if (comSettings!=nil) then (nth_list comParams 4) else "1" -> serialiostopb in	
	set iostopbits = _CReditLine _channel winComConfig 80 150 w-85 20 ET_DOWN serialiostopb;
	
	_CRtext _channel winComConfig 5 175 70 20 ET_ALIGN_LEFT "Last char:";
	let if (comSettings!=nil) then (nth_list comParams 5) else "1" -> serialiolchar in	
	set iolastchar = _CReditLine _channel winComConfig 80 175 w-85 20 ET_DOWN serialiolchar;
	
	_CRtext _channel winComConfig 5 200 70 20 ET_ALIGN_LEFT "Refresh (ms):";
	let if (comSettings!=nil) then (nth_list comParams 6) else "10000" -> serialiorefresh in	
	set iorefresh = _CReditLine _channel winComConfig 80 200 w-85 20 ET_DOWN serialiorefresh;
	
    _CBbutton _CRbutton _channel winComConfig w/3 225 ((2*w/3)-5) 20 0 (_loc this "btn_save" nil) @_saveComPort comboKey;
    _CBbutton _CRbutton _channel winComConfig 5 225 ((w/3)-10) 20 0 (_loc this "btn_close" nil) @_closeComPort winComConfig
   );
  _CBwinDestroy winComConfig @_endComPort 0
  );
  0;; 


  
fun deleteOb() = //inst, scom)=
    _saveDiary;
	_saveInventory;
	_deltimer timer;
	_DMSevent this "destroy" nil nil;
	0;;

 
fun rflTimer (t, param)=

  //let strcatn iniPath::DMSname::"/clocation"::(itoa DMSid)::".txt"::nil -> posfile in	 
  /*let strcatn iniPath::DMSname::"/clocation.txt"::nil -> posfile in	 
  let _getpack _checkpack posfile -> position in
  
  let lineextr position -> p in
  let lineextr param -> pl in  
  
  _echo strcatn "Serial IO:"::posfile::"-"::position::"-"::param::nil  
  */
  _echo strcatn "Diary:"::port::","::speed::","::bytesize::","::parity::","::stopbits::","::lastchar::nil  
  0;;  
  
/*read local presets, override session file*/  
fun readLocalPresets(sno, param) =
  let strcatn sesfname::(itoa sno)::".txt"::nil -> ses in
  let strcat sessionpath ses -> sesfile in
  
  let strcatn iniPath::DMSname::"/diary.ini"::nil -> comfile in
  let _getpack _checkpack comfile -> comSettings in 
  
  if (comSettings!=nil) then
	_storepack comSettings sesfile  
  else 
    _storepack param sesfile;;  
	

fun activate(from,action,param,rep)=
 if !strcmp action "Set" then 
 (
   _setDiary param;
   saveLog "diary.txt" strcatn "Set:"::param::nil;
   0;
 ) 
 else if !strcmp action "Del" then
 (
   _delDiary param;
   saveLog "diary.txt" strcatn "Del:"::param::nil;
   0;
 )
 else if !strcmp action "Act" then
 (
   _actDiary;
   saveLog "diary.txt" strcatn "Act:"::param::nil;
   0;
 ) 
 else if !strcmp action "Settings" then
 (
   configComPort;
   0;
 ) 
 else 
   nil;;  	
	
fun cbcomm(ui,action,param)=
 if !strcmp action "Set" then
  //getphot ui 
  nil
 else if !strcmp action "Del" then
  //(set uis=ui::uis;0)
  nil
 else if !strcmp action "Act" then
  //(set uis=ui::uis;0)
  nil  
 else 0;;	
		
fun newInst(ui)=
 UcbComm this ui @cbcomm;
 0;;	
 
fun __itemAdded(item, counter)=
 addInventory item counter;
 _DMSevent this "itemAdded" item nil;
 
 let _items2text items nil -> items in
 _DMSevent this "itemsRead" items nil;
 0;;
 
fun __itemDeleted(item, counter)=
 delInventory item counter;
 _DMSevent this "itemDeleted" item nil;
 
 let _items2text items nil -> items in 
 _DMSevent this "itemsRead" items nil;
 0;; 
 
fun __hear(s)=
 _DMSevent this "hear" s nil;; 
   

fun IniDMI(param)=    
 _DMSregisterDMI this @activate @deleteOb;
  UcbCreate this @newInst;   
 
  _DMSevent this "in" nil nil;
  //_DMSeventTag this "in" nil nil nil;	   
  //_DMSevent this "hear" strcat strcat ">> Serial ON " _DMSgetName this "\n" nil;   
  
  /*begin session*/
  set sno = rand;
  set nsno = strcatn "diary"::"/"::(itoa sno)::nil;

  /*in this file write static params */
  /*let strcatn sesfname::(itoa sno)::".txt"::nil -> ses in
  /let strcat sessionpath ses -> sesfile in
  _storepack param sesfile;
  *//*override session com params */
  readLocalPresets sno param;
   
  /*read session to variable */   
  set sesdata = getSessionData;
  //_echo strcatn "Session init ("::DMSname::"):"::(strbuild sesdata)::nil 
  
  _loadDiary;
	
	/*set com settings */
    set port = getSessionParam 1 1;
    set speed = getSessionParam 2 1;
    set bytesize = getSessionParam 3 1;	
    set parity = getSessionParam 4 1;
    set stopbits = getSessionParam 5 1;
    set lastchar = getSessionParam 6 1; 
	set refresh = getSessionParam 7 1; 
	
    /* slastchar NONE CR CRLF */
	let atoi lastchar -> lc in
    let if lc == 1 then ctoa 13 else if lc == 2 then (strcat (ctoa 13) (ctoa 10)) else "" -> slastchar in	

	let 1 -> inst in /*dummy var */
    ( 
	  /*params are session-server data but inside take global params as readed */

	  //let atoi refresh -> serialCheck in
	  //set timer = _rfltimer _starttimer _channel (atoi refresh) @rflTimer (strbuild sesdata);	  

	  /*_DMSdefineActions this (["Set" @activate])::
                             (["Del" @activate])::
							 (["Act" @activate])::
							 (["Settings" @configComPort])::nil;
	  */
      0	  
    );;  