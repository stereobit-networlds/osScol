/* Camera Plugin - DMS2 - JUNE 2014 - by stereobit */

typeof class = S;;

var maxDownloadSize=3145728;;/*1048576;; 204800;;*/
var maxUploadSize=3145728;;
var iniPath="locked/conf/routeloader/";;

struct Pho=[cliPho:CLIENT,idPho:I,workPho:S,signPho:S,transPho:I]mkPho;;

typeof clis=[Pho r1];;

fun cliByCli(x,c)=x.cliPho==c;;
fun cliById(x,id)=x.idPho==id;;
   
fun addRoute(ui,cli,s)=

  _storepack "test" "tmp/routeloader/srv.txt";

  let search_in_list clis @cliByCli cli -> q in
  let if q!=nil then q
  else let mkPho[cli cli.idCLI "" nil nil] -> r in
  (set clis=r::clis;r)
  -> p in
  if s==nil then
  (
    set p.workPho="";
	//_DMSservice cli "Position 1."
	0
  )	
  else if strlen s then
  (
   set p.workPho = let strcat p.workPho s -> ns in
   if (strlen ns)<maxUploadSize then ns else "";
   //_DMSservice cli "Position 2."
   0
  )
  else
   let itoa _DMSgetId cli -> name in
   let _getlongname p.workPho "face" "#" -> sign in
   (
     _storepack p.workPho strcat "tmp/routeloader/srv" sign;
     _RSunregister this name;
     _RSregister this name 0 p.workPho;
     set p.workPho=nil;
     set p.signPho=strcat "tmp/routeloader/" sign;
	 //_DMSservice cli "Position 3.";
	 UsendCli this cli ui "routeLoaded" nil
   );;

/*******************************************************************************
 cbTick() - Instance timer callback function
 tmr -> Timer           : Instance timer
 a -> [S I I I I Timer] : [ObName PlayFlag PlayOnceFlag ServerActionFlag TimerPeriod Timer]
   <- I                 : Not used
*******************************************************************************/
fun cbTick(tmr, a) =
   _rfltimer tmr nil nil;
   _deltimer tmr;
   mutate a <- [_ 0 _ 0 _ nil];
   0;;

/*******************************************************************************
 StartTimer() - Starts instance timer
  a -> [S I I I I Timer] : [ObName PlayFlag PlayOnceFlag ServerActionFlag TimerPeriod Timer]
    <- I                 : Not used
*******************************************************************************/
fun StartTimer(a) =
   let a -> [_ _ _ _ period _] in
      mutate a <- [_ _ _ _ _ (_rfltimer _starttimer _channel period @cbTick a)];
   0;;

/*******************************************************************************
 ResetTimer() - Destroy instance existing timer
 a -> [S I I I I Timer] : [ObName PlayFlag PlayOnceFlag ServerActionFlag TimerPeriod Timer]
   <- I                 : Not used
*******************************************************************************/
fun ResetTimer(a) =
   let a -> [_ _ _ _ _ tmr] in
      if (tmr != nil) then
      (
         _rfltimer tmr nil nil;
         _deltimer tmr;
         mutate a <- [_ 0 _ _ _ nil];
         0;
      )
      else
         0;;


fun cbActivate(o,from,cli,action,param,reply,a)=
   if (!strcmp action (strcat (ObName o) ".routeS")) then
   (
      ResetTimer a;
      mutate a <- [_ 1 1 1 _ _]; 
      UsendCli this nil (ObUi o) "route" (ObName o); 
      StartTimer a;
      0;
   )
   else if (!strcmp action (strcat (ObName o) ".routeLoopS")) then
   (
      ResetTimer a;
      mutate a <- [_ 1 0 1 _ _]; 
      UsendCli this nil (ObUi o) "routeLoop" (ObName o); 
      0;
   )  
   else if (!strcmp action (strcat (ObName o) ".routeStopS"))then
   (
      ResetTimer a;
      mutate a <- [_ 0 _ 1 _ _]; 
      UsendCli this nil (ObUi o) "routeStop" (ObName o); 
      0;
   )
   else
      0;;
 
fun cbcomm(ui,cli,action,param,b)=
 if !strcmp action "getFile" then
 (
  let b -> [name long] in
   if name==nil then nil
   else
    UsendCli this cli ui "setFile" linebuild name::long::nil
 )
 else if !strcmp action "addRoute" then
 ( 
    addRoute ui cli param;
	0  
 )  
 else nil;;	  
 
fun cbNewOb(o)=	

   let atoi hd UgetParam ObUi o "NbFrames" -> nf in
   let atoi hd UgetParam ObUi o "Framerate" -> fr in
   let [(ObName o) 0 0 0 (1000 * nf / fr) nil] -> a in
   (
      /*UcbComm this ObUi o mkfun5 @cbComm a;*/
      ObRegisterAction o (strcatn (ObName o)::".routeS"::nil) mkfun7 @cbActivate a;
      ObRegisterAction o (strcatn (ObName o)::".routeLoopS"::nil) mkfun7 @cbActivate a;
      ObRegisterAction o (strcatn (ObName o)::".routeStopS"::nil) mkfun7 @cbActivate a;
   );

   /*****download NMEA file resource*****/ 
   let hd UgetParam ObUi o "GpsBuf" -> name in
   if name==nil then nil
   else
   let _checkpack name -> p in
     if p==nil then nil
     else
      let _fileSize p -> long in
      (
       if long <= maxDownloadSize then
         _RSregister this name RSfile+RScontrol name
       else nil;
       UcbComm this ObUi o mkfun5 @cbcomm [name itoa long];
       0;
      );;


fun IniPlug(file)=
   set class = getInfo strextr _getpack _checkpack file "name";
   PlugRegister class @cbNewOb nil;
   0;;
