/* Nguards Plugin - DMS - Sep 2014 - by stereobit */


typeof Class = S ;;

defcom CscoreS=scoreS I;;

var iDefaultScaleFactorMin       = 80;;
var iDefaultScaleFactorMax       = 200;;
var iDefaultScaleFactorIncrement = 10;;
var iDefaultFramerate            = 30;;   

var _log=1;;

fun _echo(x,s)= 
 if (_log==1) then
 (
   _DMSevent this "hear" strcat strcat ">> " x "\n" nil;
 )else nil;; 

fun lcat(p, q)=
  if p==nil then
    q
  else
    (hd p)::lcat (tl p) q;;

/*fetch anchor objects list, non position anchor elements are the guard objects*/ 
fun HSObjList(l)=
 if l==nil then
  nil
 else let l->[a nl] in
 (
  match a with
   (objAnchor [H3d_Obj H3d_Mat AnchorName i] ->
     [[H3d_Obj (M3getFather session H3d_Obj) 1 H3d_Mat AnchorName i] (HSObjList nl)])
  |( _ -> 
     (HSObjList nl))
 );; 
 
/*fetch anchor positions list, rest elements are the guard area positions*/ 
fun HSPosList(l)=
 if l==nil then
  nil
 else let l->[a nl] in
 (
  match a with
   (posAnchor [AnchorName pos ang] ->
     [[pos ang AnchorName] (HSPosList nl)])
  |( _ -> 
     (HSPosList nl))
 );;  
 
fun copyNobject(p, obj, mat, father, objname, adjustYrot, adjustYpos, sourceY) = 
  if p==nil then 
    nil
  else 
    let hd p -> [pos ang posname] in
    let pos -> [x y z] in	
	let ang -> [a b c] in	
	let if (sourceY!=nil) then sourceY else (y+adjustYpos) -> ypos in	
	//let M3objName session obj -> objname2 in
	//let M3getObj session objname2 -> myobj in
	let M3copyObj session obj -> nobj in
	(
	  //_echo strcatn "NsourceY.............:"::objname::","::(itoa ypos)::nil
	  //_echo strcatn "Nobject:"::objname::","::(itoa x)::","::(itoa y)::","::(itoa z)::nil
	  M3link session nobj shell; /*father...not a copy*/	  
	  M3setObjVec session nobj [x ypos z];
	  M3setObjAng session nobj [(a+adjustYrot) b c];
	  
	  [nobj (M3getObjScale session nobj)]::(copyNobject tl p obj mat father objname adjustYrot adjustYpos sourceY)
	);;   
 
/*copy main object at anchor positions, make list of n objects*/ 
fun makeNobjects(o, sourceY, minDistance) = 
  let (HSObjList ObAnchor o) -> l in
  if l==nil then
    nil
  else let hd l -> [monObj objFather _ monMat name _] in /*exclude first element = main*/
  (
    let if (sourceY>0) then 
	  ( let M3getObjVec session monObj -> [_ sy _] in	sy ) /*120, -60!!!*/
	else 
	  nil -> ssy in
	  
    let atoi hd UgetParam ObUi o "adjustYrot" -> ayRot in 
    let atoi hd UgetParam ObUi o "adjustYpos" -> ayPos in 	
	let (HSPosList ObAnchor o) -> p in
    copyNobject p monObj monMat objFather name ayRot ayPos ssy
  );;     

fun deleteNobject(obj)=  
  M3unLink session obj;;

/*check if points has not taken */  
fun checkNpoints(l)= 
  if l==nil then 
    0
  else
    let hd l -> [obj x] in
	(if (obj==nil) then nil else if x>0 then 1 else checkNpoints tl l);;
	
/*points has taken (local score)*/  
fun sumNpoints(l, sum)= 
  if l==nil then 
    sum
  else
    let hd l -> [_ x] in
	(if x==0 then sumNpoints (tl l) (sum+1) else sumNpoints (tl l) sum);;	

/*points has taken (ob score) server ask*/ 	
fun sumNallPoints(name) = 
  if name==nil then
    nil
  else  
   _DMSsend this CscoreS [name];; 
   
/*server reply*/   
fun __score(s) =
  _DMSevent this strcat Class ".Score" s nil; /*class instance .score here*/
  0;;   
		
  
/************************** move *********************/  

fun objPath(obj, goto) =
  let M3getObjVec session obj -> [x y z] in
  let goto -> [gx gy gz] in
  //....
  0;;  
  
/*  
fun avatarMoveBuffer(buffer, pos) =  
  if buffer==nil then
    pos::nil
  else 
    if (sizelist buffer) < 2 then
      pos::buffer	
	else
	  let hd buffer -> pos1 in
	  (
        mutate tl buffer <- pos1;
        mutate hd buffer <- pos;
        buffer		
	  );;   
*/    

/*find if into points of interest*/
fun inArea(p, distance, obPos) =  	
  if (p==nil) then
    nil
  else 
    let hd p ->	[point _] in	
	let point -> [px py pz] in
    let obPos -> [x y z] in	
	let x-px -> dx in
	let y-py -> dy in	
	let z-pz -> dz in
	if (abs dx < distance) && (abs dy < distance) && (abs dz < distance) then
	  //(dx+dy+dz/3)
	  [dx dy dz]
    else
      inArea tl p distance obPos;;	
	  
	
/*face to avatar */
fun objTarget(obj, adjustY)=
    let M3calcPosRef session obj shell   -> [src _]  in
    let M3calcPosRef session (ObGetMain owner) shell -> [dst _]  in
    let M3angularTarget src dst        -> [an _ _] in
    let M3getObjAng session obj        -> [_ b c]  in
	
    let if (adjustY!=nil) then (an+adjustY) else an -> anY in	
    M3setObjAng session obj [anY b c];
	0;;
	
fun move0(o,obj,apos,rotation,d,into,minDist,adjustYr) =
  let apos -> [x y z] in
  let M3getObjVec session obj -> [ox oy oz] in  
  let M3getObjAng session obj -> [oa ob oc] in 
  let rotation -> [ora orb orc] in
  let into -> [inx iny inz] in	  
  if (d < minDist) && (into != nil) then 
  ( 	
	objTarget obj adjustYr;
	  
	M3setObjVec session obj [x oy z];
	M3setObjAng session obj [ora ob oc]; /*target and angle conflict effect */ 	
	
	_DMSevent this strcat (ObName o) ".inArea" nil nil;	
	0
  )
  else if (d < minDist*2) then
	objTarget obj adjustYr /*just target*/
  else 
	nil;;
	
fun move1(o,obj,apos,rotation,d,into,minDist,adjustYr) =
  let apos -> [x y z] in
  let M3getObjVec session obj -> [ox oy oz] in  
  let M3getObjAng session obj -> [oa ob oc] in 
  let rotation -> [ora orb orc] in
  let into -> [inx iny inz] in	  
  if (d < minDist) || (into != nil) then 
  ( 	  
	M3setObjVec session obj [x+(inx/2) oy z+(inz/2)];
	M3setObjAng session obj [ora ob oc];  
	  
	objTarget obj adjustYr;
	_DMSevent this strcat (ObName o) ".inArea" nil nil;	
	0
  )
  else if (d < minDist*2) then
	objTarget obj adjustYr /*just target*/
  else 
	nil;;
	

fun moveobj(x, v) =
  let v -> [rotation area deletion adjustYr minDist o] in
  let x -> [obj gY] in /*use as ground Y position */
  //let rotation -> [ora orb orc] in
  let M3getObjVec session M3getFather session (ObGetMain owner) -> [x y z] in	
  //let M3getObjVec session obj -> [ox oy oz] in
  //let M3getObjAng session obj -> [oa ob oc] in
  //let oy+(y-gY) -> objGroundY in
  (
    //M3rotateObjExt session obj rotation;
	//objTarget obj adjustYr;	
	//_echo strcat "Rotation................" itoa ora 
    /*check distance */	 	
	let inArea area minDist [x y z] -> into in /*differencial d */
	let M3distance session obj (M3getFather session (ObGetMain owner)) -> d in
	
	move1 o obj [x y z] rotation d into minDist adjustYr;
	0
	
	/*
	if (d < minDist) && (into != nil) then 
    ( 	
	  
	  objTarget obj adjustYr;	  
	  
	  _DMSevent this strcat (ObName o) ".inArea" nil nil;
	  //mutate x <- [_ 0]; //deactivate object 	
	  //if (deletion==1) then deleteNobject obj else 0
	  
	  let into -> [inx iny inz] in	  
	  M3setObjVec session obj [x oy z];
	  M3setObjAng session obj [ora ob oc]; 
	 	  
	  
	  // abuse avatar 
	  if (ora>2000) then
	    M3setObjVec session M3getFather session (ObGetMain owner) [(x+500) y z]
	  else	
	    0
	) 
	else if (d < minDist*2) then
	  objTarget obj adjustYr 
	else 
	  nil*/
  );;

fun cbPlay(o,v,l)=
  let v -> [framerate tick angx angxaccum angy angyaccum angz angzaccum unlink adjustYr minDist area plan] in
  let checkNpoints l -> points in
  if (points > 0) then	 
  (
   //_DMSevent this strcat (ObName o) ".nScore" itoa (sumNpoints l 0) nil; 
   if tick == nil then
     set tick = _tickcount
   else
     nil;
   let _tickcount -> currenttick in
   let ((currenttick - tick) * framerate) -> timeframe in
   let 0 -> a in
   let 0 -> b in
   let 0 -> c in
   (
     if angx == nil then
       nil
     else
       let (timeframe * angx) -> xtimeframe in
     let mod xtimeframe 1000 -> xaccum in   
     ( 
      set b = (xtimeframe / 1000);
      set angxaccum = angxaccum + xaccum;
        if xaccum >= 1000 then
        (
          set b = b + 1;
          set angxaccum = angxaccum - 1000
        )
        else
          nil;
     );
     
     if angy == nil then
       nil 
     else                   
       let (timeframe * angy) -> ytimeframe in
     let mod ytimeframe 1000 -> yaccum in   
     (
       set a = (ytimeframe / 1000);
       set angyaccum = angyaccum + yaccum;
         if yaccum >= 1000 then
         (
            set a = a + 1;
            set angyaccum = angyaccum - 1000
         )
         else
           nil;
     );

     if angz == nil then
       nil
     else 
       let (timeframe * angz) -> ztimeframe in
     let mod ztimeframe 1000 -> zaccum in   
     (
       set c = (ztimeframe / 1000);
       set angzaccum = angzaccum + zaccum;
         if zaccum >= 1000 then
         (
           set c = c + 1;
           set angzaccum = angzaccum - 1000
         )
         else
           nil; 
     );
      
     mutate v <- [_ currenttick _ angxaccum _ angyaccum _ angzaccum _ _ _ _ _];
	 apply_on_list l @moveobj [[a b c] area unlink adjustYr minDist o];
     0
   )
  )
  else if (points==0) then
  ( /*send message once disable list, message*/
    _DMSevent this strcat (ObName o) ".npointend" nil nil;
	//set l = nil;
	mutate hd l <- [nil _]; /*disable list, first obj -> nil*/
	0
  )
  else  
    nil;; /*disabled n list*/
  





/*******************************************************************************
 Get3dGuards() - Retrieving the guard objects
 l -> [Anchor r1]  : List of objects linked to the instance
   <- [[H3d I] r1] : List of 3D objects with their original scale
*******************************************************************************/
fun Get3dGuards(l, gY) =
   if (l == nil) then
      nil
   else
      match hd l with
      (objAnchor [h _ _ _] -> [h gY]::(Get3dGuards (tl l) gY)) |
      (_ -> Get3dGuards (tl l) gY);;
	  
/*fetch anchor positions list, rest elements are the guard area positions*/ 
fun GetGuardArea(l)=
   if l==nil then
      nil
   else
      match hd l with
      (posAnchor [_ pos _] -> [pos 0]::(GetGuardArea tl l)) |
      (_ -> GetGuardArea tl l);;  
	  
fun makeGuardPlan(guards, area) = 0;;	  
	  
	  
fun start(o) =
   let atoi hd UgetParam ObUi o "distanceCheck" -> minDist in /*distance to check */
   let atoi hd UgetParam ObUi o "removeObj" -> unlink in /*remove at point*/
   //let hd UgetParam ObUi o "itemName" -> itemname in /*must have item_ to count as item into diary inventory or scs event param*/
   
   let hd UgetParam ObUi o "isScale" -> sc in 
   let if (nil != sc) then atoi sc else 0 -> isScale in
   let hd UgetParam ObUi o "isRotation" -> rc in 
   let if (nil != rc) then atoi rc else 0 -> isRotate in 
   let hd UgetParam ObUi o "sourceY" -> sy in 
   let if (nil != sy) then atoi sy else 0 -> sourceY in  /*adjust Y as source obj - same level*/  

   let atoi hd UgetParam ObUi o "angX" -> angx in
   let atoi hd UgetParam ObUi o "angY" -> angy in
   let atoi hd UgetParam ObUi o "angZ" -> angz in   
   
   let atoi hd UgetParam ObUi o "adjustYrot" -> ayRot in 
   let atoi hd UgetParam ObUi o "adjustYpos" -> ayPos in 	   

   let hd UgetParam ObUi o "ScaleFactorMin" -> sMin in 
   let if (nil != sMin) then atoi sMin else iDefaultScaleFactorMin -> iSFMin in
   let hd UgetParam ObUi o "ScaleFactorMax" -> sMax in 
   let if (nil != sMax) then atoi sMax else iDefaultScaleFactorMax -> iSFMax in
   let hd UgetParam ObUi o "ScaleFactorIncrement" -> sInc in 
   let if (nil != sInc) then atoi sInc else iDefaultScaleFactorIncrement -> iSFInc in
   let hd UgetParam ObUi o "Framerate" -> sFra in 
   let if (nil != sFra) then atoi sFra else iDefaultFramerate -> iFRate in
   
   let M3getObjVec session M3getFather session (ObGetMain owner) -> [_ y _] in /*ground Y*/
   let Get3dGuards (ObAnchor o) y -> guards in /*guard objects*/
   let GetGuardArea ObAnchor o -> area in /*guard area*/
   let makeGuardPlan guards area -> plan in
   (
	    ObCbAnim o mkfun2 mkfun3 @cbPlay guards [iFRate nil angx 0 angy 0 angz 0 unlink ayRot minDist area plan] ;
		0
   );;  	  
	  
	  
fun activate(o,from,action,param,reply,l)=  
 
   if !strcmp action (strcatn (ObName o)::".start"::nil) then 
   (  
     start o;
  	 _DMSevent this strcat (ObName o) ".started" nil nil; 
     0 	 
   )	   
   else 
     nil;;   


/*******************************************************************************
 cbNewOb() - Standard newOb function
 o -> Ob : New Ob
   <- I  : Not used
*******************************************************************************/   
fun cbNewOb(o) =

   ObRegisterAction o (strcatn (ObName o)::".start"::nil) mkfun6 @activate nil;
   0;;


/*******************************************************************************
 IniPlug() - Standard IniPlug function
 file -> S : .plug plugin file
      <- I : Not used
*******************************************************************************/
fun IniPlug(file) =
   set Class = getInfo strextr _getpack _checkpack file "name" ;
   PlugRegister Class @cbNewOb nil ;
   0;;

 