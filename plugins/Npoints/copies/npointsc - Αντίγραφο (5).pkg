/* ScalePulsator Plugin - DMS - July 2000 - by Loïc ARGELIES */
/* based on the ROTATE plugin march 99 by Sylvain HUET       */
 
/* Scale2 - February 2003 - by Bob Le Gob         */
/* Last update: 7th of February 2003 - Bob Le Gob */


typeof Class = S ;;

var iDefaultScaleFactorMin       = 80;;
var iDefaultScaleFactorMax       = 200;;
var iDefaultScaleFactorIncrement = 10;;
var iDefaultFramerate            = 30;;   

var _log=1;;

fun _echo(x,s)= 
 if (_log==1) then
 (
   _DMSevent this "hear" strcat strcat ">> " x "\n" nil;
 )else nil;; 

fun lcat(p, q)=
  if p==nil then
    q
  else
    (hd p)::lcat (tl p) q;;

/*fetch anchor object list, 1st element is the main object*/ 
fun HSObjList(l)=
 if l==nil then
  nil
 else let l->[a nl] in
 (
  match a with
   (objAnchor [H3d_Obj H3d_Mat AnchorName i] ->
     [[H3d_Obj (M3getFather session H3d_Obj) 1 H3d_Mat AnchorName i] (HSObjList nl)])
  |( _ -> 
     (HSObjList nl))
 );; 
 
/*fetch anchor position list, rest elements are the positions*/ 
fun HSPosList(l)=
 if l==nil then
  nil
 else let l->[a nl] in
 (
  match a with
   (posAnchor [AnchorName pos ang] ->
     [[pos ang AnchorName] (HSPosList nl)])
  |( _ -> 
     (HSPosList nl))
 );;  
 
fun copyNobject(p, obj, mat, father, objname, adjustYrot, adjustYpos, sourceY) = 
  if p==nil then 
    nil
  else 
    let hd p -> [pos ang posname] in
    let pos -> [x y z] in	
	let ang -> [a b c] in	
	let if (sourceY!=nil) then sourceY else (y+adjustYpos) -> ypos in	
	//let M3objName session obj -> objname2 in
	//let M3getObj session objname2 -> myobj in
	let M3copyObj session obj -> nobj in
	(
	  //_echo strcatn "NsourceY.............:"::objname::","::(itoa ypos)::nil
	  //_echo strcatn "Nobject:"::objname::","::(itoa x)::","::(itoa y)::","::(itoa z)::nil
	  M3link session nobj shell; /*father...not a copy*/	  
	  M3setObjVec session nobj [x ypos z];
	  M3setObjAng session nobj [(a+adjustYrot) b c];
	  
	  [nobj (M3getObjScale session nobj)]::(copyNobject tl p obj mat father objname adjustYrot adjustYpos sourceY)
	);;   
 
/*copy main object at anchor positions, make list of n objects*/ 
fun makeNobjects(o, sourceY, minDistance) = 
  let (HSObjList ObAnchor o) -> l in
  if l==nil then
    nil
  else let hd l -> [monObj objFather _ monMat name _] in /*exclude first element = main*/
  (
    let if (sourceY>0) then ( let M3getObjVec session monObj -> [_ sy _] in	sy ) /*120, -60!!!*/
	else nil -> ssy in
    let atoi hd UgetParam ObUi o "adjustYrot" -> ayRot in 
    let atoi hd UgetParam ObUi o "adjustYpos" -> ayPos in 	
	let (HSPosList ObAnchor o) -> p in
    copyNobject p monObj monMat objFather name ayRot ayPos ssy
  );;     

fun deleteNobject(obj)=  M3unLink session obj;;

  
/************************** rotate *********************/  
fun rotobj(x, v) =
  let v -> [rotation deletion itemname minDist o] in
  let x -> [obj scale] in /*use scale as param when object deleted = 0 */

  if (scale==0) then 
	nil
  else /*is active object*/
  (
    M3rotateObjExt session obj rotation;
	 
    /*check distance */	 
	let M3calcProj session cam obj -> [screenx screeny zdist sradius] in
	let M3distance session obj (M3getFather session (ObGetMain owner)) -> d in
	if (d < minDist) && (zdist != nil) then /*mix distance and zdist view*/
    ( 
	  //_DMSevent this strcat (ObName o) ".npointset" (strcatn (_DMSgetName this)::"."::itemname::nil) nil;
	  /*ui param or scs param or nil*/
	  _DMSevent this strcat (ObName o) ".npointset" (if itemname!=nil then itemname else nil) nil; /*scs event param*/
	  mutate x <- [_ 0]; /*deactivate object */	
	  
	  if (deletion==1) then deleteNobject obj else 0
	) 
	else 
	  nil
  )	
;;

fun cbRotate(o,v,l)=
  let v -> [framerate tick angx angxaccum angy angyaccum angz angzaccum unlink itemname minDist] in
  (
   if tick == nil then
     set tick = _tickcount
   else
     nil;
   let _tickcount -> currenttick in
   let ((currenttick - tick) * framerate) -> timeframe in
   let 0 -> a in
   let 0 -> b in
   let 0 -> c in
   (
     if angx == nil then
       nil
     else
       let (timeframe * angx) -> xtimeframe in
     let mod xtimeframe 1000 -> xaccum in   
     ( 
      set b = (xtimeframe / 1000);
      set angxaccum = angxaccum + xaccum;
        if xaccum >= 1000 then
        (
          set b = b + 1;
          set angxaccum = angxaccum - 1000
        )
        else
          nil;
     );
     
     if angy == nil then
       nil 
     else                   
       let (timeframe * angy) -> ytimeframe in
     let mod ytimeframe 1000 -> yaccum in   
     (
       set a = (ytimeframe / 1000);
       set angyaccum = angyaccum + yaccum;
         if yaccum >= 1000 then
         (
            set a = a + 1;
            set angyaccum = angyaccum - 1000
         )
         else
           nil;
     );

     if angz == nil then
       nil
     else 
       let (timeframe * angz) -> ztimeframe in
     let mod ztimeframe 1000 -> zaccum in   
     (
       set c = (ztimeframe / 1000);
       set angzaccum = angzaccum + zaccum;
         if zaccum >= 1000 then
         (
           set c = c + 1;
           set angzaccum = angzaccum - 1000
         )
         else
           nil; 
     );
      
     mutate v <- [_ currenttick _ angxaccum _ angyaccum _ angzaccum _ _ _]; 
	 apply_on_list l @rotobj [[a b c] unlink itemname minDist o];
     0
   )
)
;;  
  



/*******************************************************************************
 UpdateCurrentScaleFactor() - Updating the global scaling factor of the instance
 p -> [I I I I I I I] : [ScaleMin ScaleMax ScaleIncrement CurrentScale Framerate Tick Accumulator]
   <- I               : Not used
*******************************************************************************/
fun UpdateCurrentScaleFactor(p) =
   let p -> [iSFMin iSFMax iSFInc iSCur iFRate iTick iAccum _ _ _ _] in
   let _tickcount -> iCurTick in
   let (iCurTick - iTick) -> iTimeLapse in
   let ((iTimeLapse * iFRate) / 1000) -> iFCount in
   let (mod (iTimeLapse * iFRate) 1000) -> iFAccum in   
   ( 
      set iAccum = iAccum + iFAccum;
      if (iAccum >= 1000) then
      (
         set iFCount = iFCount + 1;
         set iAccum = iAccum - 1000;
         0;
      )
      else
         0;
      if (iFCount >= 1) then
         let 0 -> i in
         (
            while (i < iFCount) do
            (
               set iSCur = iSCur + iSFInc ;
               if (iSCur >= iSFMax) then
               (
                  set iSCur = iSFMax;
                  set iSFInc = -iSFInc;
                  0;
               )
               else if (iSCur <= iSFMin) then
               (
                  set iSCur = iSFMin;
                  set iSFInc = -iSFInc;
                 0;
               )
               else
                  0;      
               set i = i + 1;
            );
            mutate p <- [_ _ iSFInc iSCur _ iCurTick iAccum _ _ _ _];
            0;
         )
      else
         0;
   );;

/*******************************************************************************
 cbScaleSingle3dOb() - Scaling a 3D object
 elt -> [H3d I]       : 3D object with its original scale
 p -> [I I I I I I I] : [ScaleMin ScaleMax ScaleIncrement CurrentScale Framerate Tick Accumulator]
   <- I               : Not used
*******************************************************************************/
fun cbScaleSingle3dOb(elt, p)=
   let elt -> [h s] in
   let p -> [_ _ _ iSCur _ _ _ deletion itemname minDist o] in
      //M3setObjScale session h ((iSCur * s) / 100);;
	  
   if (s==0) then 
	 nil
   else /*is active object*/
   (
    M3setObjScale session h ((iSCur * s) / 100);
	 
    /*check distance */	 
	let M3calcProj session cam h -> [screenx screeny zdist sradius] in
	let M3distance session h (M3getFather session (ObGetMain owner)) -> d in
	if (d < minDist) && (zdist != nil) then /*mix distance and zdist view*/
    ( 
	  /*ui param else scs param or nil*/
	  _DMSevent this strcat (ObName o) ".npointset" (if itemname!=nil then itemname else nil) nil; /*scs event param*/
	  mutate elt <- [_ 0]; /*deactivate object */	
	  
	  if (deletion==1) then deleteNobject h else 0
	) 
	else 
	  nil
   );;	  


/*******************************************************************************
 cbScale() - ObCbAnim callback
 o -> Ob              : Ob to which the instance is associated
 p -> [I I I I I I I] : [ScaleMin ScaleMax ScaleIncrement CurrentScale Framerate Tick Accumulator]
 l -> [[H3d I] r1]    : List of 3D objects with their original scale
   <- I               : Not used
*******************************************************************************/
fun cbScale(o, p, l) = 
   UpdateCurrentScaleFactor p;
   apply_on_list l @cbScaleSingle3dOb p;;


/*******************************************************************************
 Get3dObjectsScales() - Retrieving the original scales of objects
 l -> [Anchor r1]  : List of objects linked to the instance
   <- [[H3d I] r1] : List of 3D objects with their original scale
*******************************************************************************/
fun Get3dObjectsScales(l) =
   if (l == nil) then
      nil
   else
      match hd l with
      (objAnchor [h _ _ _] -> [h (M3getObjScale session h)]::(Get3dObjectsScales tl l)) |
      (_ -> Get3dObjectsScales tl l);;


/*******************************************************************************
 cbNewOb() - Standard newOb function
 o -> Ob : New Ob
   <- I  : Not used
*******************************************************************************/   
fun cbNewOb(o) =
   let atoi hd UgetParam ObUi o "distanceCheck" -> minDist in /*distance to check */
   let atoi hd UgetParam ObUi o "removeObj" -> unlink in /*remove at point*/
   let hd UgetParam ObUi o "itemName" -> itemname in /*must have item_ to count as item into diary inventory or scs event param*/
   
   let hd UgetParam ObUi o "isScale" -> sc in 
   let if (nil != sc) then atoi sc else 0 -> isScale in
   let hd UgetParam ObUi o "isRotation" -> rc in 
   let if (nil != rc) then atoi rc else 0 -> isRotate in 
   let hd UgetParam ObUi o "sourceY" -> sy in 
   let if (nil != sy) then atoi sy else 0 -> sourceY in  /*adjust Y as source obj - same level*/  

   let atoi hd UgetParam ObUi o "angX" -> angx in
   let atoi hd UgetParam ObUi o "angY" -> angy in
   let atoi hd UgetParam ObUi o "angZ" -> angz in   

   let hd UgetParam ObUi o "ScaleFactorMin" -> sMin in 
   let if (nil != sMin) then atoi sMin else iDefaultScaleFactorMin -> iSFMin in
   let hd UgetParam ObUi o "ScaleFactorMax" -> sMax in 
   let if (nil != sMax) then atoi sMax else iDefaultScaleFactorMax -> iSFMax in
   let hd UgetParam ObUi o "ScaleFactorIncrement" -> sInc in 
   let if (nil != sInc) then atoi sInc else iDefaultScaleFactorIncrement -> iSFInc in
   let hd UgetParam ObUi o "Framerate" -> sFra in 
   let if (nil != sFra) then atoi sFra else iDefaultFramerate -> iFRate in
   
   let Get3dObjectsScales ObAnchor o -> l3dObScales in /*first anchor object*/
   let makeNobjects o sourceY nil -> l3dNScales in /*copy object at positions*/
   (
      set l3dObScales = lcat l3dObScales l3dNScales; /*concat anchor and n object lists */  
	  
	  if isScale then
        ObCbAnim o mkfun2 mkfun3 @cbScale l3dObScales [iSFMin iSFMax iSFInc ((iSFMin + iSFMax) / 2) iFRate _tickcount 0 unlink itemname minDist o]
	  else if isRotate then
        ObCbAnim o mkfun2 mkfun3 @cbRotate l3dObScales [iFRate nil angx 0 angy 0 angz 0 unlink itemname minDist]  
	  else
        nil; /*do nothing*/ 
   0);;  


/*******************************************************************************
 IniPlug() - Standard IniPlug function
 file -> S : .plug plugin file
      <- I : Not used
*******************************************************************************/
fun IniPlug(file) =
   set Class = getInfo strextr _getpack _checkpack file "name" ;
   PlugRegister Class @cbNewOb nil ;
   0;;

 