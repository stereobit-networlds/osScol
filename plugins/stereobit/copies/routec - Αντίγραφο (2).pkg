/* gps object Plugin - DMS2 - JUNE 2014 - by stereobit */

typeof class=S;;

var maxDownloadSize=3145728;;//1048576;; //204800;;

struct TrajAnim = [TAname:S,
                   TAframerate:I,
                   TAplay:I,
                   TAplayOnce:I,
                   TAtick:I,
                   TAfel:[I r1],
                   TAinit:I] mkTrajAnim;; 
				
/*xyz obj calibration */				
var iIX = -24700;;//-24700;;   // 25700 pour 100%
var iIY = 15500;;//1600;;//15500;; /* 120% 1500, 110% 1600 */
var iIZ = 1300;;//3300;;

/*NMEA float precision */
var NMEAline = [6 9 10];; 
var NMEAline_france = [6 9 10];; /*6 9 10 france */
/* delta computation static point dif*/
var sIX = "00202.5776";; /*lon*/
var sIY = "510.0";;      /*alt*/
var sIZ = "4846.0024";; /*lat*/

var sFoot   = "30.48";; /*Y delta */
var sMScale = "25000.0";; /*xy delta */
var sWScale = "0.204";; /* x delta */
var sHScale = "0.135";; /* z delta */

/*NMEA float precision */ 
var NMEAline_pakistan = [10 9 10];; /*10 9 10 pakistan*/
var NMEAline_saloniki = [9 11 12];; /*9 11 12 thessaloniki */
/* delta computation static point dif*/
//var sIX = "02258.330217";; /*lon*/
//var sIY = "510.0";;      /*alt*/
//var sIZ =  "4035.413286";; /*lat*/

//var sFoot   = "30.48";; /*Y delta */
//var sMScale = "25000.0";; /*xy delta */
//var sWScale = "0.804";; /* x delta */
//var sHScale = "0.435";; /* z delta */

typeof iX = I;;
typeof iY = I;;
typeof iZ = I;;
typeof rX = I;;

typeof iOldX = I;;
typeof iOldY = I;;
typeof iOldZ = I;;
var iMaxDHor = 500;;
var iMaxDVer = 500;;
typeof iErrH = I;;
typeof iErrV = I;;
			
typeof lInpData = [S r1];;				   
typeof lNMEAData = [S r1];;	
var iniPath="locked/conf/stereobit/";;

typeof sno = I;;	   
typeof nsno = S;;
typeof sesfile = S;;
typeof sesdata = [[S r1] r1];;
var sesfile = "gpsbuf.txt";;

var log=0;;
var verbose=0;;	
var gps_verbose=0;;	
var rLog=1;;
var interpoleRate = 10;;

proto GetSessionData = fun [] [S r1];;

fun getSessionParam(line, word) = 
  let nth_list sesdata (line-1) -> l in 
  nth_list l (word-1);;  
/*hd hd sesdata;;*/

fun sessionpath() = 
   strcatn iniPath::DMSname::"/"::(nsno)::"/"::nil;;	
   
fun fooCoord (coord) =
	let coord -> [iX iY iZ] in
	strcatn (itoa iX)::","::(itoa iY)::","::(itoa iZ)::nil;;

/* return true if physics (gravity and collision)
   is currently activated for local client */
fun C3D_IsPhysicsActivated () = cel.Cel3dphysics;;

/* return true if physics (gravity and collision)
   is currently activated for server */
fun C3D_IsGlobalPhysicsActivated () = cel.Cel3dglobalphysics;;	
				   
fun saveLog(fname, s)=
 if (log==1) then
 (
    let strcatn (sessionpath)::fname::nil -> logBuf in
 
	let _appendpack s _getmodifypack logBuf ->append in
	if (append==-1) then
		_createpack s _getmodifypack logBuf
	else nil
 )
 else nil;;

fun echo(x,s)= 
  saveLog "echo.txt" strcat x "\n";
  if (verbose == 1) then
	_DMSevent this "hear" strcat strcat ">> " x "\n" nil
  else nil;;

fun _echo(x,s)= 
_DMSevent this "hear" strcat strcat ">> " x "\n" nil;
saveLog "_echo.txt" strcat x "\n";;

fun gps_echo(x,s)= 
  if (gps_verbose == 1) then
	_DMSevent this "hear" strcat strcat ">> " x "\n" nil
  else nil;;

fun recordLog(fname, s)=
 if (rLog==1) then
 (
    let strcatn (sessionpath)::fname::nil -> logBuf in
 
	let _appendpack s _getmodifypack logBuf ->append in
	if (append==-1) then
		_createpack s _getmodifypack logBuf
	else nil
 )
 else nil;;   
 
//interpolate 
fun linearInterpolate(a, b, mu) = M3interpVec a b mu;;
//(a*(1-mu)+b*mu)

fun Interpolate(O3d, a, b) =
  M3setObjVec session O3d (linearInterpolate a b interpoleRate)
;;			

//interpolate Angle
fun linearInterpolateAng(a, b, mu) = M3interpAng a b mu;;

fun InterpolateAng(O3d, ra, rb) =
  M3setObjAng session O3d (linearInterpolateAng ra rb interpoleRate)
;;	

/*Object functions */
fun GetObjAngle(O3d) = 
    M3getObjAng session O3d
;;

fun SetObjAngle(O3d, ang, interp) = 
	if interp then
	    InterpolateAng O3d GetObjAngle O3d ang
	else	 
        M3setObjAng session O3d ang
;;

fun GetObjPosition(O3d) = 
    M3getObjVec session O3d
;;
	
fun SetObjPosition(O3d, pos, interp) = 

	/*...fix ang back viewing*/
	//SetObjAngle M3angularTarget GetObjPosition pos;
	//without interp
	//M3setObjAng session O3d M3angularTarget GetObjPosition pos;

	if interp then
	    Interpolate O3d GetObjPosition O3d pos
	else	
        M3setObjVec session O3d pos
;;

fun GetObjName(O3d) = 
  M3objName session O3d;;

//read data from line array	
fun GetData(line, n) =
  let 1 -> i in
  let 0 -> ind1 in
  let 0 -> ind2 in
  (
    while (i < n) do
    (
      set ind1 = 1 + strfind "," line ind1;
      set i = i + 1;
    );
    set ind1 = 1 + strfind "," line ind1;
    set ind2 = strfind "," line ind1;
    substr line ind1 (ind2 - ind1);
  );; 

fun CheckNumChars(str, sta, end) =
  if (sta == end) then
    0 
  else
    let nth_char str sta -> c in
      if (((c >= '0) && (c <= '9)) || (c == '.)) then
        CheckNumChars str (sta + 1) end
      else
        1;;
		
proto CheckLine = fun [S] [S r1];;
fun CheckLine(line) =	
      if (!strcmp (substr line 0 3) "Pos") then
      (
        let GetData line 1 -> data in
          if ((atoi data) != nil) then
            line::nil
          else
            nil;
      )	
      else if (!strcmp (substr line 0 3) "Ang") then
      (
        line::nil
      )
      else
        nil;;	  
		
//read route scenario
fun ReadRouteScenario (O3d, interpolationFlag, sesfile) =	
	
    //read data file here
	let strcatn (sessionpath)::"_"::(sesfile)::nil -> tempBuf in
	//set mytempline = lineextr _getpack _checkpack tempBuf;
	
	let hd lInpData -> line in
    let CheckLine line -> l in
    (	
	  //let M3objName session O3d -> O3Name in   
	  let GetObjName O3d -> O3Name in
      //_echo strcatn "Object name:"::(O3Name)::nil
	  
	  /*get objects current position <<<<<<<<<<<<<<<<<<<<<<<<*/
	  let M3getObjVec session O3d -> [Ox Oy Oz] in
	  let M3getObjAng session O3d -> [Orx Ory Orz] in	  

      if (l == nil) then
      (
	    _echo strcatn "NULL (" :: (O3Name) :: "):0" :: nil
        //M3setObjVec session O3d [100 500 100];		
        0;
      )
      else if (!strcmp (hd l) "Pos") then
      (
        let GetData line 1 -> iX in
        let GetData line 2 -> iY in
        let GetData line 3 -> iZ in	  
	  
	    M3setObjVec session O3d [(atoi iX) (atoi iY) (atoi iZ)];
	    gps_echo strcatn "GPGGA ("::(O3Name)::"):"::(itoa iX)::","::(itoa iY)::","::(itoa iZ)::nil		
        0;
      )		  
      else if (!strcmp (hd l) "Ang") then
      (
	    let GetData line 1 -> rX in
	  
	    M3setObjAng session O3d [(atoi rX) 0 0];		
	    gps_echo strcatn "GPRMC (" :: (O3Name) :: "):0" :: nil		
        0;
      )	
      else
        0;
		
	  //set lInpData = tl lInpData;	
    );;	  

//read and check data lines		
proto CheckIntegrity = fun [S] [S r1];;
fun CheckIntegrity(line) =

      /* SAVE OBJECT ROUTE LOG IN SESSION DIR */
      saveLog "backroute.txt" strcat line "\n";

      if (!strcmp (substr line 0 6) "$PGRME") then
      (
        nil;
      )
      else if (!strcmp (substr line 0 6) "$PGRMZ") then
      (
        let GetData line 1 -> data in
          if ((atoi data) != nil) then
            "$PGRMZ"::data::nil
          else
            nil;
      )
      else if (!strcmp (substr line 0 6) "$GPRMC") then
      (
        //_fooS line;
        let GetData line 1 -> dataTim in
        let GetData line 2 -> dataVal in
        let GetData line 3 -> dataLat in
        let GetData line 4 -> dataNor in
        let GetData line 5 -> dataLon in
        let GetData line 6 -> dataEas in
        let GetData line 7 -> dataRun in
        let GetData line 8 -> dataAng in
		
		let atoi getSessionParam 2 4 -> c1 in
		let atoi getSessionParam 2 5 -> c2 in
		let atoi getSessionParam 2 6 -> c3 in
		
        let if ((strlen dataTim) == c1) then 0 else 1 -> errTim in
        let if !strcmp dataVal "A" then 0 else 1 -> errVal in
        let if (((strlen dataLat) == c2) && (dataLat != nil) && (strcmp dataLat nil) && (strcmp dataLat "")) then 0 else 1 -> errLat in
        let if !strcmp dataNor "N" then 0 else 1 -> errNor in
        let if (((strlen dataLon) == c3) && (dataLon != nil) && (strcmp dataLon nil) && (strcmp dataLon "")) then 0 else 1 -> errLon in
        let if !strcmp dataEas "E" then 0 else 1 -> errEas in
        // No control for dataRun
        let (errTim + errVal + errLat + errNor + errLon + errEas) -> error in
        let strfind "." dataAng 0 -> ind in
        let strlen dataAng -> len in
          if ((error == 0) && ((atof dataAng) != nil) && (ind == (len - 2)) && (ind != 0) && ((CheckNumChars dataAng 0 len) == 0)) then
            "$GPRMC"::dataAng::nil
          else
            nil;
      )
      else if (!strcmp (substr line 0 6) "$GPGGA") then
      (
        let GetData line 1 -> dataTim in
        let GetData line 2 -> dataLat in
        let GetData line 3 -> dataNor in
        let GetData line 4 -> dataLon in
        let GetData line 5 -> dataEas in
			
		let atoi getSessionParam 2 4 -> c1 in
		let atoi getSessionParam 2 5 -> c2 in
		let atoi getSessionParam 2 6 -> c3 in

        let if ((strlen dataTim) == c1) then 0 else 1 -> errTim in
        let if (((strlen dataLat) == c2) && (dataLat != nil) && (strcmp dataLat nil) && (strcmp dataLat "")) then 0 else 1 -> errLat in
        let if !strcmp dataNor "N" then 0 else 1 -> errNor in
        let if (((strlen dataLon) == c3) && (dataLon != nil) && (strcmp dataLon nil) && (strcmp dataLon "")) then 0 else 1 -> errLon in
        let if !strcmp dataEas "E" then 0 else 1 -> errEas in
        let (errTim + errLat + errNor + errLon + errEas) -> error in
          if (error ==0) then
            "$GPGGA"::dataLat::dataLon::nil
          else
            nil;
      )
      else if (!strcmp (substr line 0 6) "cbTick") then
      (
        "cbTick"::nil;
      )
      else
        nil;;
		
//calculate - transfrom lat lot ang to vectors
//fun readGeo (O3d, interpolationFlag, sesfile) =
fun readGeo (O3d, data) =
	//_echo strcatn "ReadGeo:"::(sesfile)::nil			
	//_echo strcatn "ReadGeo:"::data::nil	
	
	set lInpData = lineextr data;
	let hd lInpData -> line in
	let nth_list lInpData 1 -> oname in
	let nth_list lInpData 2 -> line_number in

    let CheckIntegrity line -> l in
    (  
	  let GetObjName O3d -> O3Name in
      //_echo strcatn "Object name:"::(O3Name)::oname::"-"::line_number::nil
	  
	  /*interpolation flag moved at session params <<<<<<<<<<*/
	  let atoi getSessionParam 2 7 -> interpolationFlag in
	  
      if (l == nil) then
      (
	    gps_echo strcatn "LINE (" :: (O3Name) :: "):0" :: nil	
        0;
      )
      else if (!strcmp (hd l) "$PGRME") then
      (
	    gps_echo strcatn "PGRME (" :: (O3Name) :: "):0" :: nil
		
	    /* SAVE OBJECT ROUTE IN GPS CMD */
	    let strcatn "PGRME 0,0"::nil -> vline in
        recordLog strcat O3Name "-backroute-gps.txt" strcat vline "\n";			
        0;
      )
      else if (!strcmp (hd l) "$PGRMZ") then
      (
	    let getSessionParam 1 2 -> ssIY in
		let getSessionParam 1 4 -> ssFoot in	  
	  
        let (hd tl l) -> data in
        let ftoi (((itof atoi data) -. (atof ssIY)) *. (atof ssFoot)) -> delta in
        (
		  set iY = (atoi getSessionParam 2 2) + delta;
		  
		  /*<<<<<<<<<<<<< get object's current x,z*/
		  let GetObjPosition O3d -> [iX Oy iZ] in
		  
          if ((atoi data) == nil) then
          (
            set iErrV = iErrV + 1;
            0;
          )
		  /* <<<<<<<<<< */
          else if ((iOldY != nil) && ((abs (iY - iOldY)) > (iMaxDVer * iErrV))) then
		  //else if ((Oy != 0) && ((abs (iY - Oy)) > (iMaxDVer * iErrV))) then
          (
            set iErrV = iErrV + 1;
            _echo strcatn "Err (pos Y):"::(itoa iErrV)::"-["::(itoa Oy)::"-"::(itoa iY)::"]"::nil			
            0;
          )
          else
          (
            set iErrV = 1;
            set iOldY = iY; /*<<<<<<<<<<<<<<*/
			
			if interpolationFlag then
			   Interpolate O3d [iX Oy iZ] [iX iY iZ]		
			else
			   M3setObjVec session O3d [iX iY iZ]; 
			  
			gps_echo strcatn "PGRMZ ("::(O3Name)::"):"::(itoa iX)::","::(itoa iY)::","::(itoa iZ)::nil

	        /* SAVE OBJECT ROUTE IN GPS CMD / VECTORS */
	        let strcatn "PGRMZ:"::(data)::nil -> vline in
            recordLog strcat O3Name "-backroute-gps.txt" strcat vline "\n";				
			
			let strcatn "Pos Y,"::(itoa iX)::","::(itoa iY)::","::(itoa iZ)::nil -> out in
			recordLog strcat O3Name "-backroute-vectors.txt" strcat out "\n";
						
            0;
          );
        );
        0;
      )
      else if (!strcmp (hd l) "$GPRMC") then
      (
        let (hd tl l) -> data in
        (
          if ((atof data) == nil) then
		  (
		    set rX = 0; /*<<<<<<<<<<<<<<<<<*/
			//set rX = Orx; /*current ang */
            0;
		  )	
          else
          (
		    /*<<<<<<<<<<<<< get object's current angle*/
			let GetObjAngle O3d -> [Orx Ory Orz] in
			
			if interpolationFlag then
			  InterpolateAng O3d [Orx Ory Orz] [(ftoi (-.65536.0 *. ((atof data) /. 360.0))) 0 0]
			else		  
			  M3setObjAng session O3d [(ftoi (-.65536.0 *. ((atof data) /. 360.0))) 0 0];		
			  
			let (ftoi (-.65536.0 *. ((atof data) /. 360.0))) -> rX in			
			gps_echo strcatn "GPRMC (" :: (O3Name) ::"):":: (itoa rX) :: ",0,0" ::nil
			
	        /* SAVE OBJECT ROUTE IN GPS CMD / VECTORS */
	        let strcatn "GPRMC:"::(data)::nil -> vline in
            recordLog strcat O3Name "-backroute-gps.txt" strcat vline "\n";				
			
			let strcatn "Ang,"::(itoa (ftoi (-.65536.0 *. ((atof data) /. 360.0))))::",0,0"::nil -> out in
			recordLog strcat O3Name "-backroute-vectors.txt" strcat out "\n";
									
            0;
          );
        );
        0;
      )
      else if (!strcmp (hd l) "$GPGGA") then
      (
		let atoi getSessionParam 2 5 -> c2 in
		let atoi getSessionParam 2 6 -> c3 in		
		let (c2-2) -> lenLat in
		let (c3-3) -> lenLon in
		
		let getSessionParam 1 1 -> ssIX in	  
		let getSessionParam 1 3 -> ssIZ in
		let getSessionParam 1 5 -> ssMScale in	  
		let getSessionParam 1 6 -> ssWScale in
		let getSessionParam 1 7 -> ssHScale in		
	  
        let (hd tl l) -> dataH in
        let strlen substr dataH 2 lenLat -> chkH in
        let atof substr dataH 2 lenLat -> mntH in
        let atof substr ssIZ 2 lenLat -> mntZ in
        let ftoi ((mntH -. mntZ) *. ((atof ssMScale) /. (atof ssHScale))) -> deltaH in
        let (hd tl tl l) -> dataW in
        let strlen substr dataW 3 lenLon -> chkW in
        let atof substr dataW 3 lenLon -> mntW in
        let atof substr ssIX 3 lenLon -> mntX in
        let ftoi ((mntW -. mntX) *. ((atof ssMScale) /. (atof ssWScale))) -> deltaW in
        (
          set iX = (atoi getSessionParam 2 1) + deltaW;
          set iZ = (atoi getSessionParam 2 3) + deltaH;
		  
		  /*get object's current y*/
		  let GetObjPosition O3d -> [Ox iY Oz] in
		  
          if ((mntH == nil) || (mntW == nil) || ((chkH + chkW) != (lenLat+lenLon))) then 
          (
            set iErrH = iErrH + 1;
			_echo strcat "Err (14):" (itoa iErrV)
            0;
          )
          /*<<<<<<<<<<<<<<<<<<<<<*/
		  else if (((iOldX != nil) && (iOldZ != nil)) && ((ftoi sqrt (sqr itof (iX - iOldX)) +. (sqr itof (iZ - iOldZ))) > (iMaxDHor * iErrH)))then
		  //else if (((Ox != 0) && (Oz != 0)) && ((ftoi sqrt (sqr itof (iX - Ox)) +. (sqr itof (iZ - Oz))) > (iMaxDHor * iErrH)))then
          (
            set iErrH = iErrH + 1;
			_echo strcatn "Err (pos XZ):"::(itoa iErrH)::"-["::(itoa Ox)::","::(itoa Oz)::"]-["::(itoa iY)::","::(itoa iZ)::"]"::nil
            0;
          )
          else
          (
            set iErrH = 1;
            /*set iOldX = iX;
            set iOldZ = iZ;<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
			
			if interpolationFlag then
			  Interpolate O3d [Ox iY Oz] [iX iY iZ]
			else
			  M3setObjVec session O3d [iX iY iZ];
			  
			gps_echo strcatn "GPGGA ("::(O3Name)::"):"::(itoa iX)::","::(itoa iY)::","::(itoa iZ)::nil

	        /* SAVE OBJECT ROUTE IN GPS CMD / VECTORS */
	        let strcatn "GPGGA:"::(dataH)::","::(dataW)::nil -> vline in
            recordLog strcat O3Name "-backroute-gps.txt" strcat vline "\n";				
			
			let strcatn "Pos XZ,"::(itoa iX)::","::(itoa iY)::","::(itoa iZ)::nil -> out in
			recordLog strcat O3Name "-backroute-vectors.txt" strcat out "\n";
						
            0;
          );
        );        
        0;
      )
      else if (!strcmp (hd l) "cbTick") then
      (
	    gps_echo strcatn "cbTick ("::(O3Name)::"):0":: nil
		
	    /* SAVE OBJECT ROUTE IN GPS CMD */
	    let strcatn "cbTick 0 0"::nil -> vline in
        recordLog strcat O3Name "-backroute-gps.txt" strcat vline "\n";	
        0;
      )
      else
        0;
  );;
 
fun cb_geturl (inet, o, content, reason, z) =
  let z->[data] in 
  let strcatn (sessionpath)::(sesfile)::nil -> gBuf in  
   
  if reason == 0 then
  (
    mutate z <- [strcat data content];    
    0
  )
  else if reason == 1 then
  (
   /*
   let lineextr data -> lOutData in
   let nth_list lOutData 1 -> insfile in       
   let strcatn (sessionpath)::(insfile)::".txt"::nil -> gBuf in
   	  
   _echo strcatn "http CB filename:"::(gBuf)::nil 
   _createpack data _getmodifypack gBuf*/
   
   let o -> [h _ oname _] in
   //_echo strcatn "http CB2:"::(oname)::nil
   readGeo h data;
  )
  else nil /*error*/
;;
 
fun cbSlidePosINET(x, o)= 
	let hd UgetParam ObUi o "GpsUrl" -> GpsUrl in
    let strcatn GpsUrl::(ObName o)::nil -> gUri in
	
    //let z -> [lastFrame currentFrame _ _ interpolateFlag sesfile] in 
    let x -> [ob _ _] in
    //let ob -> [h _ oname _] in   	
	
	/*loose interpolation flag ??? fix val inside*/
	/*IMPORTANT :::::for this method interpolation flag moved at session params */
	
	INETGetURL _channel gUri 0 mkfun5 @cb_geturl [nil] ob; 
0;;		 
   
fun readNMEA(O3d, interpolationFlag, sesfile) = 

  let hd lNMEAData -> line in
  if (strcmp line nil) then
  (
    let CheckIntegrity line -> l in
    (
	  //let M3objName session O3d -> O3Name in   
	  let GetObjName O3d -> O3Name in
      //_echo strcatn "Object name:"::(O3Name)::oname::"-"::line_number::nil
	  
      if (l == nil) then
      (
	    gps_echo strcatn "NMEA LINE (" :: (O3Name) :: "):0" :: nil	
        0;
      )
      else if (!strcmp (hd l) "$PGRME") then
      (
	    gps_echo strcatn "NMEA PGRME (" :: (O3Name) :: "):0" :: nil		
        0;
      )
      else if (!strcmp (hd l) "$PGRMZ") then
      (
	    let getSessionParam 1 2 -> ssIY in
		let getSessionParam 1 4 -> ssFoot in	  
	  
        let (hd tl l) -> data in
        let ftoi (((itof atoi data) -. (atof ssIY)) *. (atof ssFoot)) -> delta in
        (
		  set iY = (atoi getSessionParam 2 2) + delta;
		  
		  /*<<<<<<<<<<<<< get object's current x,z*/
		  //let M3getObjVec session O3d -> [iX Oy iZ] in
		  let GetObjPosition O3d -> [iX Oy iZ] in
		  
          if ((atoi data) == nil) then
          (
            set iErrV = iErrV + 1;
            0;
          )
		  /* <<<<<<<<<< */
          else if ((iOldY != nil) && ((abs (iY - iOldY)) > (iMaxDVer * iErrV))) then
		  //else if ((Oy != 0) && ((abs (iY - Oy)) > (iMaxDVer * iErrV))) then
          (
            set iErrV = iErrV + 1;
            _echo strcatn "NMEA Err (pos Y):"::(itoa iErrV)::"-["::(itoa Oy)::"-"::(itoa iY)::"]"::nil			
            0;
          )
          else
          (
            set iErrV = 1;
            set iOldY = iY; /*<<<<<<<<<<<<<<*/
			
			if interpolationFlag then
			   Interpolate O3d [iX Oy iZ] [iX iY iZ]		
			else
			   M3setObjVec session O3d [iX iY iZ]; 
			  
			gps_echo strcatn "NMEA PGRMZ ("::(O3Name)::"):"::(itoa iX)::","::(itoa iY)::","::(itoa iZ)::nil		
            0;
          );
        );
        0;
      )
      else if (!strcmp (hd l) "$GPRMC") then
      (
        let (hd tl l) -> data in
        (
          if ((atof data) == nil) then
		  (
		    set rX = 0; /*<<<<<<<<<<<<<<<<<*/
			//set rX = Orx; /*current ang */
            0;
		  )	
          else
          (
		    /*<<<<<<<<<<<<< get object's current angle*/
		    //let M3getObjAng session O3d -> [Orx Ory Orz] in
			let GetObjAngle O3d -> [Orx Ory Orz] in
		  
			if interpolationFlag then
			  InterpolateAng O3d [Orx Ory Orz] [(ftoi (-.65536.0 *. ((atof data) /. 360.0))) 0 0]
			else		  
			  M3setObjAng session O3d [(ftoi (-.65536.0 *. ((atof data) /. 360.0))) 0 0];		
			  
			let (ftoi (-.65536.0 *. ((atof data) /. 360.0))) -> rX in			
			gps_echo strcatn "NMEA GPRMC (" :: (O3Name) ::"):":: (itoa rX) :: ",0,0" ::nil					
            0;
          );
        );
        0;
      )
      else if (!strcmp (hd l) "$GPGGA") then
      (
		let atoi getSessionParam 2 5 -> c2 in
		let atoi getSessionParam 2 6 -> c3 in		
		let (c2-2) -> lenLat in
		let (c3-3) -> lenLon in
		
		let getSessionParam 1 1 -> ssIX in	  
		let getSessionParam 1 3 -> ssIZ in
		let getSessionParam 1 5 -> ssMScale in	  
		let getSessionParam 1 6 -> ssWScale in
		let getSessionParam 1 7 -> ssHScale in		
	  
        let (hd tl l) -> dataH in
        let strlen substr dataH 2 lenLat -> chkH in
        let atof substr dataH 2 lenLat -> mntH in
        let atof substr ssIZ 2 lenLat -> mntZ in
        let ftoi ((mntH -. mntZ) *. ((atof ssMScale) /. (atof ssHScale))) -> deltaH in
        let (hd tl tl l) -> dataW in
        let strlen substr dataW 3 lenLon -> chkW in
        let atof substr dataW 3 lenLon -> mntW in
        let atof substr ssIX 3 lenLon -> mntX in
        let ftoi ((mntW -. mntX) *. ((atof ssMScale) /. (atof ssWScale))) -> deltaW in
        (
          set iX = (atoi getSessionParam 2 1) + deltaW;
          set iZ = (atoi getSessionParam 2 3) + deltaH;
		  
		  /*get object's current y*/
		  //let M3getObjVec session O3d -> [Ox iY Oz] in
		  let GetObjPosition O3d -> [Ox iY Oz] in
		  
          if ((mntH == nil) || (mntW == nil) || ((chkH + chkW) != (lenLat+lenLon))) then 
          (
            set iErrH = iErrH + 1;
			_echo strcat "NMEA Err (14):" (itoa iErrV)
            0;
          )
          /*<<<<<<<<<<<<<<<<<<<<<*/
		  else if (((iOldX != nil) && (iOldZ != nil)) && ((ftoi sqrt (sqr itof (iX - iOldX)) +. (sqr itof (iZ - iOldZ))) > (iMaxDHor * iErrH)))then
		  //else if (((Ox != 0) && (Oz != 0)) && ((ftoi sqrt (sqr itof (iX - Ox)) +. (sqr itof (iZ - Oz))) > (iMaxDHor * iErrH)))then
          (
            set iErrH = iErrH + 1;
			_echo strcatn "NMEA Err (pos XZ):"::(itoa iErrH)::"-["::(itoa Ox)::","::(itoa Oz)::"]-["::(itoa iY)::","::(itoa iZ)::"]"::nil
            0;
          )
          else
          (
            set iErrH = 1;
            /*set iOldX = iX;
            set iOldZ = iZ;<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
			
			if interpolationFlag then
			  Interpolate O3d [Ox iY Oz] [iX iY iZ]
			else
			  M3setObjVec session O3d [iX iY iZ];
			  
			gps_echo strcatn "NMEA GPGGA ("::(O3Name)::"):"::(itoa iX)::","::(itoa iY)::","::(itoa iZ)::nil		
            0;
          );
        );        
        0;
      )
      else if (!strcmp (hd l) "cbTick") then
      (
	    gps_echo strcatn "NMEA cbTick ("::(O3Name)::"):0":: nil	
        0;
      )
      else
        0;
		
	  /*read next line */	
	  set lNMEAData = tl lNMEAData;	
	)
  )
  else nil;; 	   
   
fun cbSlidePosLocal(x, z) = 
   
   let z -> [_ _ _ _ interpolateFlag sesfile] in
   let x -> [o sz l] in
   let o -> [h _ oname _] in
      
   /*ReadRouteScenario h interpolateFlag sesfile; */
   readNMEA h interpolateFlag sesfile; 
0;;   

/* if GpsRec flag is on and file exist */
/* read pre-recorded gps data file, not live gps calls*/
fun openNMEA(o) = 
   let atoi hd UgetParam ObUi o "GpsRec" -> GpsRec in
   let hd UgetParam ObUi o "GpsBuf" -> GpsBuf in
   if ((GpsBuf != "") && (GpsRec)) then 
   (
	 _getpack _checkpack GpsBuf;
   )	
  else nil;;

/*******************************************************************************
 CheckFrameEvents() - Checking frame events
 l   -> [I r1] : Frame events list
 fr1 -> I      : Previous frame
 fr2 -> I      : Current frame
 o   -> Ob     : Current Ob whose trajectory is being checked for frame events
     <- I      : Not used
*******************************************************************************/
fun CheckFrameEvents(l, fr1, fr2, o) =
   if (l == nil) then
      0
   else
      let hd l -> fre in
		  
          if (fre > fr2) then
		  (
		     //_echo strcatn "Frame:"::(itoa fre)::" Previous:"::(itoa fr1)::" Current:"::(itoa fr2)::nil
             0;
		  )	 
          else if ((fre >= fr1) && (fre < fr2)) then
          (
             _DMSevent this (strcatn (ObName o)::".Frame#"::(itoa fre)::nil) nil nil;
             CheckFrameEvents tl l fr1 fr2 o;
			 0;
          )
		  else
			 CheckFrameEvents tl l fr1 fr2 o;;

/*******************************************************************************
 cbSlidePos() - ObCbAnim callback - Computing new frame
 o -> Ob                 : Ob to which the anim is associated
 z -> [I I I [I r1] I I] : [TotalFrames CurrentFrame FramesAccumulator FrameEventsList InterpolateFlag InterpolateAnglesFlag]
 a -> TrajAnim           : Trajectory beind computed
   <- I                  : Not used
*******************************************************************************/
fun cbSlidePos(o,z,a)=

   let hd UgetParam ObUi o "GpsRec" -> GpsRec in
		 
   if a.TAplay then
   (  
      if (a.TAtick == nil) then
         set a.TAtick = _tickcount
      else
         nil; 
		 
      let _tickcount -> currenttick in
      let ((currenttick - a.TAtick) * a.TAframerate) -> timeFrame in
      let (mod timeFrame 1000) -> accum in   
      let (timeFrame / 1000) -> deltaFrame in
      let z -> [lastFrame currentFrame accumulator x _ _] in
      (

         set accumulator = accumulator + accum;
         if (accumulator > 1000) then
         (
            set deltaFrame = deltaFrame + 1; 
            set accumulator = accumulator - 1000;
         )
         else
            nil;
         if ((currentFrame + deltaFrame) < (lastFrame - 1)) then
         (	 
		    if (!strcmp (substr GpsRec 0 1) "1") then
			(  
               apply_on_list x @cbSlidePosLocal z;
               0;
			)  
            else (		 
               CheckFrameEvents a.TAfel currentFrame (currentFrame + deltaFrame) o; 
               mutate z <- [_ (currentFrame + deltaFrame) accumulator _ _ _]; 
               set a.TAtick = currenttick;			
               /*apply_on_list x @cbSlidePosINET o;*/ //ONLY IN LAST FRAME
               0;
			)
         )
         else
         (
			if (!strcmp (substr GpsRec 0 1) "1") then
			(
               /*RELOAD Flag:At last frame, re-read empty NMEA file if empty*/ 
			   let atoi hd UgetParam ObUi o "BufReload" -> BufReload in
               if ((BufReload) && (!strcmp (hd lNMEAData) nil)) then
               (
                  /*_echo strcat "Reload file" ""*/			   
                  set lNMEAData = lineextr openNMEA o;
     	          0;  
	           )
	           else 0;			
			
              apply_on_list x @cbSlidePosLocal z;
			  0;
  			)  
            else (	
		       CheckFrameEvents a.TAfel currentFrame lastFrame o;
               mutate z <- [_ (lastFrame - 1) _ _ _ _];			
               apply_on_list x @cbSlidePosINET o; /* AT LAST FRAME UPDATE */
               set a.TAtick = nil;
               if a.TAplayOnce then
                set a.TAplay = 0
               else
                set a.TAplay = 1; 
               mutate z <- [_ 0 0 _ _ _];			   
               0;
			);
            0;			
         );
      );
      0;
   )
   else 
      0;	  
   0;;
   

/*******************************************************************************
 OptSingleAngle() - Optimizing single position's angle
 p -> I : Source angle
 q -> I : Destination original angle
   <- I : Optimized destination angle
*******************************************************************************/
fun OptSingleAngle(p, q) =
   let (abs (q - p)) -> path1 in
   let (abs (q + 65536 - p)) -> path2 in
   let (abs (q - 65536 - p)) -> path3 in
   let min path1 min path2 path3 -> minpath in
      if (minpath == path1) then
         q
      else if (minpath == path2) then
         (q + 65536)
      else
         (q - 65536);;

/*******************************************************************************
 OptimizeDestinationOrientation() - Optimizing position orientation
 ap -> I       : Source angle a
 aq -> I       : Destination original angle a
 bp -> I       : Source angle b
 bq -> I       : Destination original angle b
 cp -> I       : Source angle c
 cq -> I       : Destination original angle c
    <- [I I I] : Optimized destination orientation
*******************************************************************************/
fun OptimizeDestinationOrientation(ap, aq, bp, bq, cp, cq) =
   [(OptSingleAngle ap aq) (OptSingleAngle bp bq) (OptSingleAngle cp cq)];;

/*******************************************************************************
 PrepareOptimization2() - Optimizing positions - Second step
 src -> [Anchor r1]                      : PositionsList
     <- [[S [I I I] [I I I] [I I I]] r1] : OpimizedPositionsList
*******************************************************************************/
fun PrepareOptimization2(src) =
   if ((tl src) == nil) then
      let hd src -> p in
         match p with
         (posAnchor [posp [xp yp zp] [ap bp cp]] -> [posp [xp yp zp] [ap bp cp] [nil nil nil]]::nil)
   else
      let hd src -> p in
      let hd tl src -> q in
         match p with
         (posAnchor [posp [xp yp zp] [ap bp cp]] -> match q with 
                                                    (posAnchor [_ _ [aq bq cq]] -> let OptimizeDestinationOrientation ap aq bp bq cp cq -> [aq2 bq2 cq2] in
                                                                                      [posp [xp yp zp] [ap bp cp] [aq2 bq2 cq2]]::(PrepareOptimization2 tl src))
         );;

/*******************************************************************************
 PrepareOptimization() - Optimizing positions - First step
 src -> [[Anchor I [Anchor r1]] r1]                      : [Linked3dOb ListSize PositionsList]
     <- [[Anchor I [[S [I I I] [I I I] [I I I]] r1]] r1] : [Linked3dOb ListSize OpimizedPositionsList]
*******************************************************************************/
fun PrepareOptimization(src) =
   let hd src -> [o sz l] in
      [o sz (PrepareOptimization2 l)]::nil;;
      
/*******************************************************************************
 PrepAnchor() - Retrieving list of positions
 l -> [Anchor r1]                          : Anchors list
   <- [[Anchor r1] [Anchor I [Anchor r1]]] : [nil [Linked3dOb listsize poslist]] 
*******************************************************************************/
fun PrepAnchor(l)=
   if (l == nil) then 
      [nil nil]
   else 
      let l->[a n] in
      let PrepAnchor n ->[lp lo] in
         match a with
        (objAnchor o -> [nil [o (sizelist lp)-1 lp]::lo]) |
        (posAnchor _ -> [a::lp lo]);;
		
				
/*******************************************************************************
 cbActivate() - Standard callback function for plugin actions
 o      -> Ob       : Ob to which the action is associated
 from   -> DMI      : Not used
 action -> S        : Action
 param  -> S        : Parameter
 reply  -> S        : Not used
 a      -> TrajAnim : Trajectory structure associated with Ob
        <- I        : Not used
*******************************************************************************/
fun cbActivate(o,from,action,param,reply,a)=
   if !strcmp action (strcat (ObName o) ".gpsonce") then
   (
      set a.TAplay = 1; 
      set a.TAplayOnce = 1; 
      set a.TAtick = _tickcount; 
      0;
   )
   else if !strcmp action (strcat (ObName o) ".gpsloop") then
   (
      set a.TAplay = 1; 
      set a.TAplayOnce = 0; 
      set a.TAtick = _tickcount; 
      0;
   )  
   else if !strcmp action (strcat (ObName o) ".gpsstop") then
   (
      set a.TAplay = 0; 
      set a.TAtick = nil; 
      0;
   )
   else
      nil;;


/*******************************************************************************
 cbComm() - Standard cbcomm callback function for intra plugin messages
 ui     -> UserI    : User Instance linked to Ob
 action -> S        : Action
 param  -> S        : Parameter
 a      -> TrajAnim : Trajectory structure associated with Ob
        <- I        : Not used
*******************************************************************************/
/*
fun cbComm(ui,action,param,a)=
 if (!strcmp action "gpsonce") then
 (
    set a.TAplay = 1; 
    set a.TAplayOnce = 1; 
    set a.TAtick = _tickcount; 
    0;
 )  
 else if (!strcmp action "gpsloop") then
 (
    set a.TAplay = 1; 
    set a.TAplayOnce = 0; 
    set a.TAtick = _tickcount; 
    0;
 ) 
 else if (!strcmp action "gpsstop") then
 (
    set a.TAplay = 0; 
    set a.TAtick = nil; 
    0;
 )
 else if (!strcmp action "noaction") then
 (
    set a.TAplay = a.TAinit;
    0;
 )
 else
  nil;;
*/

/*file has been downloaded*/
fun DownloadedFile(FileName,o)=

 let _checkpack FileName->p in

 if p==nil then 
  ( _echo strcatn "**DOWNLOAD RESOURCE ERROR : file not found"::nil  0;)
 else
  ( _echo strcatn "**DOWNLOAD RESOURCE : file downloaded"::nil 0;)
;;

fun cbcomm(ui,action,param,o)=
 if !strcmp action "setFile" then

  let lineextr param -> [name[long _]] in
    if (atoi long) <= maxDownloadSize then
      (
	   _echo strcatn "**RESOURCE : ObName = "::(ObName o)::"-"::(name)::nil
	   _echo "**RESOURCE : download..."
	   _RSCdownload this name name mkfun2 @DownloadedFile o 1;
	   0;
	  )
    else
      (
	   _echo strcatn "**RESOURCE : ObName = "::(ObName o)::"-"::(name)::nil
	   _echo "**RESOURCE : not download"
	   DownloadedFile name o;
	   0;
	  )
 else nil;;

/*******************************************************************************
 InsertFrameEvent() - Building frame events list - Sorting list
 l   -> [I r1] : Frame events list
 fre -> I      : New frame event to insert in list
     <- [I r1] : New frame events list
*******************************************************************************/
fun InsertFrameEvent(l, fre) =
   if (l == nil) then
      fre::nil
   else
      let hd l -> elt in
         if (elt > fre) then
            fre::l
         else
            elt::(InsertFrameEvent tl l fre);;

/*******************************************************************************
 FrameEventList() - Building frame events list - Building list
 src -> [[S r1] r1] : List of parameters for the plugin instance
 dst -> [I r1]      : Frame events list to build
     <- [I r1]      : Buildt frame events list
*******************************************************************************/
fun FrameEventList(src, dst)=
   if (src == nil) then
      dst
   else
      let hd src -> [name r] in
         if !strcmp name "FrameEvent" then
            let r -> [frameNum _] in
               FrameEventList tl src InsertFrameEvent dst (atoi frameNum)
         else
            FrameEventList tl src dst;;
  
fun getSessionData() = 
   let strcatn "session_"::(itoa sno)::".txt"::nil -> ses in
   let strcat sessionpath ses -> sesfile in
   
   //let _getpack _checkpack sesfile -> data in
   //set lSesData = lineextr data;
   //lSesData;
   strextr _getpack _checkpack sesfile
;;
  
/*******************************************************************************
 cbNewOb() - New object creation
 o -> Ob : New Ob
   <- I  : Not used
*******************************************************************************/
fun cbNewOb(o)=

   /*begin session*/
   set sno = rand;
   set nsno = strcatn (ObName o)::"/"::(itoa sno)::nil;
   let hd UgetParam ObUi o "initsession" -> isession in
   let hd UgetParam ObUi o "initparser" -> iparser in   
   
   /*in this file write static params */
   let strcatn "session_"::(itoa sno)::".txt"::nil -> ses in
   let strcat sessionpath ses -> sesfile in
   _storepack strcatn isession::"\n"::iparser::nil sesfile;
   
   /*read session to variable */   
   set sesdata = getSessionData;
   _echo strcatn "Session ("::(ObName o)::"):"::(strbuild sesdata)::nil 

   /*change session filename to point to obj name passed as param to obj*/
   /*in this file url data written in */
   set sesfile = strcat ObName o ".txt";
   
   UcbComm this ObUi o mkfun4 @cbcomm o;
   
   /*get NMEA file from server */
   _echo strcatn "**RESOURCE REQUIRED :"::(ObName o)::nil   
   UsendSrv this ObUi o "getFile" nil;   
   
   /*read NMEA file (if defined) for first time */
   /*if reload parameter recall (see code up)*/   
   set lNMEAData = lineextr openNMEA o;
           
   /* main url for inet calls route*/     		 
   let hd UgetParam ObUi o "GpsUrl" -> GpsUrl in   
 
   /*play recorded -local file- mode */
   let hd UgetParam ObUi o "GpsRec" -> GpsRec in 
   _echo strcatn "Local data:"::(ObName o)::"-"::GpsRec::nil   
   
   /* log route to files enabled /disabled */
   let hd UgetParam ObUi o "GpsLog" -> GpsLog in  
   _echo strcatn "Record data:"::(ObName o)::"-"::GpsLog::nil  		   
		   
		   

   let UgetParams ObUi o -> lParams in
   let atoi hd UgetParam ObUi o "Interpolate" -> interpolateFlag in
   let atoi hd UgetParam ObUi o "Framerate" -> framerate in
   let atoi hd UgetParam ObUi o "Ini" -> ini in
   let !atoi hd UgetParam ObUi o "Loop" -> playOnce in
   let hd UgetParam ObUi o "PosAng" -> PosAng in
   let atoi hd UgetParam ObUi o "NbFrames" -> nbFrames in
   let atoi hd UgetParam ObUi o "SrvAnimAutoStart" -> srvAnimAutoStart in
   
   let PrepAnchor ObAnchor o -> [_ l] in
   let PrepareOptimization l -> lOptimized in
   let if srvAnimAutoStart then 0 else ini -> play in
   let mkTrajAnim [(ObName o) framerate play playOnce nil (FrameEventList lParams nil) ini] -> ta in
   (	

      ObCbAnim o mkfun2 mkfun3 @cbSlidePos ta [nbFrames 0 0 lOptimized interpolateFlag /*(!strcmpi PosAng "All")*/ sesfile];
	  
      /*UcbComm this ObUi o mkfun4 @cbComm ta;*/
  
      ObRegisterAction o (strcatn (ObName o)::".gpsonce"::nil) mkfun6 @cbActivate ta;
      ObRegisterAction o (strcatn (ObName o)::".gpsloop"::nil) mkfun6 @cbActivate ta;
      ObRegisterAction o (strcatn (ObName o)::".gpsstop"::nil) mkfun6 @cbActivate ta;
      if srvAnimAutoStart then
         UsendSrv this (ObUi o) "newclient" (ObName o)
      else
         nil;
      0;
   );;  

fun destroyPlug()=  
 0;;   

/*******************************************************************************
 IniPlug() - Function called when plugin is initialized
 file -> S : .plug file
      <- I : Not used
*******************************************************************************/
fun IniPlug(file)=
   set class = getInfo strextr _getpack _checkpack file "name";
   PlugRegister class @cbNewOb nil;
   0;;
