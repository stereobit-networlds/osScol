/*
-----------------------------------------------------------------------------
This source file is part of OpenSpace3D
For the latest info, see http://www.openspace3d.com

Copyright (c) 2015 stereobit.networlds

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA, or go to
http://www.gnu.org/copyleft/lesser.txt

-----------------------------------------------------------------------------
*/

/* Authors: stereobit, Bastien Bourineau */
/* Last update: 2/12/2015 */
/* Version: 1.0 */

struct TObjPath = [
                    OBJP_inst          : PInstance,
                    OBJP_h3d           : SO3_OBJECT,
                    OBJP_iSrcMode      : I,
                    OBJP_tDir          : [F F F],
                    OBJP_inipos        : [[F F F] [F F F F] [F F F]],
                    OBJP_targetPos     : [[[F F F] [F F F F] [F F F] [F F F] F] r1],
                    OBJP_posindex      : I,
                    OBJP_oldindex      : I,
                    OBJP_angcoef       : F,
                    OBJP_angstep       : F,
                    OBJP_coef          : F,
                    OBJP_kps           : I,
                    OBJP_nbKeys        : I,
                    OBJP_bLoop         : I,
                    OBJP_iTick         : I,
                    OBJP_fDirection    : F,
                    OBJP_iToAxis       : I,
                    OBJP_bPingPong     : I,
                    OBJP_bToTarget     : I,
                    OBJP_bLocal        : I,
                    OBJP_iState        : I,

                    OBJP_iLine         : I,
                    OBJP_routePath     : [S r1],

                    OBJP_center        : [F F F],
                    OBJP_scale         : [F F F],
                    OBJP_offset        : [F F F],
                    OBJP_scaleM        : F,  
                    OBJP_yfix          : F,
                    OBJP_lastpos       : S					
					
                  ] mkTObjPath;;
				  
var log=1;;
var debug=0;;
var server=0;; /*when scol server is on */	

var sTmpDownloadPath = "tmp/routes/";;
var maxDownloadSize=33145728;;

/*xyz obj calibration */				
var iIX = -24700;;/*-24700;;    25700 pour 100% */
var iIY = 15500;;/*1600;;15500;;  120% 1500, 110% 1600 */
var iIZ = 1300;;/*3300;;*/

/*NMEA float precision */
var NMEAline = [6 9 10];; 

/* delta computation static point dif*/
var sIX = "00202.5776";; /*lon*/
var sIY = "510.0";;      /*alt*/
var sIZ = "4846.0024";; /*lat*/

var sFoot   = "30.48";; /*Y delta */
var sMScale = "25000.0";; /*xy delta */
var sWScale = "0.204";; /* x delta */
var sHScale = "0.135";; /* z delta */

typeof iX = F;;
typeof iY = F;;
typeof iZ = F;;
typeof rX = F;;

typeof iOldX = F;;
typeof iOldY = F;;
typeof iOldZ = F;;
var iMaxDHor = 0.500;;
var iMaxDVer = 0.500;;
typeof iErrH = F;;
typeof iErrV = F;; 

typeof sno = I;;	   
typeof nsno = S;;
typeof sesfile = S;;
typeof sesdata = [[S r1] r1];;

var isession = "40.589226 22.964331 510.0 30.48 1500000.0 0.445 0.380";;
var iparser = "0 15500 0 9 11 12";;


fun _echo(strobj,s)= 
 if (log==1) then
	SendPluginEvent strobj.OBJP_inst "echo" s nil
 else
     nil;;

   /*begin session*/
   //set sno = rand;
   //set nsno = strcatn (ObName o)::"/"::(itoa sno)::nil;
	 
fun sessionpath(objstr) = 
   let rand -> sno in //fix
   let strcatn (getPluginInstanceName objstr.OBJP_inst)::"/"::(itoa sno)::nil -> nsno in //fix
   strcatn sTmpDownloadPath::"ospace"::"/"::(nsno)::"/"::nil;;
	 
fun getSessionData() = 
   //let strcatn "session_"::(itoa sno)::".txt"::nil -> ses in
   //let strcat sessionpath ses -> sesfile in
   //...fix
   
   //let "40.589226 22.964331 510.0 30.48 20000.0 0.445 0.380" -> isession in  //<<<<<<<<<<<<<<<<<<<<<<<
   //kamara filtered
   let "40.627138 22.957114 510.0 30.48 20000.0 0.445 0.380" -> isession in
   let "0 15500 0 9 11 12" -> iparser in 
   (   
     let strcatn isession::"\n"::iparser::nil ->sesdata in //<<<fix   
     strextr sesdata //_getpack _checkpack sesfile //fix
   )
;;
  
fun getSessionParam(line, word) =
  let getSessionData -> sesdata in //<<<fix
  let nth_list sesdata (line-1) -> l in 
  nth_list l (word-1);;
				  

				  

// 2t3 - 3t2 + 1
fun H1(coef)=
  (2.0 *. (pow coef 3.0)) -. (3.0 *. (pow coef 2.0)) +. 1.0;;


// -2t3 + 3t2
fun H2(coef)=
  (-. 2.0 *. (pow coef 3.0)) +. (3.0 *. (pow coef 2.0));;


// t3 - 2t2 +t
fun H3(coef)=
  (pow coef 3.0) -. (2.0 *. (pow coef 2.0)) +. coef;;


// t3 - t2
fun H4(coef)=
  (pow coef 3.0) -. (pow coef 2.0);;


fun getInterpolateCurve(vec1, vec2, ang1, ang2, coef)=
  let vec1 -> [x1 y1 z1] in
  let vec2 -> [x2 y2 z2] in
  let ang1 -> [ax1 ay1 az1] in
  let ang2 -> [ax2 ay2 az2] in

  let ((H1 coef) *. x1) +. ((H2 coef) *. x2) +. ((H3 coef) *. ax1) +. ((H4 coef) *. ax2) -> x in
  let ((H1 coef) *. y1) +. ((H2 coef) *. y2) +. ((H3 coef) *. ay1) +. ((H4 coef) *. ay2) -> y in
  let ((H1 coef) *. z1) +. ((H2 coef) *. z2) +. ((H3 coef) *. az1) +. ((H4 coef) *. az2) -> z in
  [x y z]
  ;;


fun getPosTime(pos)=
  let pos -> [[x y z] _ [sx sy sz] [t c b] ti] in
  ti;;


fun getPosTension(pos)=
  let pos -> [[x y z] _ [sx sy sz] [t c b] ti] in
  t;;


fun getPosContinuity(pos)=
  let pos -> [[x y z] _ [sx sy sz] [t c b] ti] in
  c;;


fun getPosBias(pos)=
  let pos -> [[x y z] _ [sx sy sz] [t c b] ti] in
  b;;


fun getPosX(pos)=
  let pos -> [[x y z] _ [sx sy sz] [t c b] ti] in
  x;;


fun getPosY(pos)=
  let pos -> [[x y z] _ [sx sy sz] [t c b] ti] in
  y;;


fun getPosZ(pos)=
  let pos -> [[x y z] _ [sx sy sz] [t c b] ti] in
  z;;


fun getPosXYZ(pos)=
  let pos -> [[x y z] _ [sx sy sz] [t c b] ti] in
  [x y z];;


fun getPosScaleXYZ(pos)=
  let pos -> [[x y z] _ [sx sy sz] [t c b] ti] in
  [sx sy sz];;


fun vecLerpF(v1, v2, coef)=
  let multiplyVectorF v2 [coef coef coef] -> v1t in
  let multiplyVectorF v1 [(1.0 -. coef) (1.0 -. coef) (1.0 -. coef)] -> v2t in
    addVectorF v1t v2t;;


fun getInterpolateTCB(lpos, t)=
	let sizelist lpos -> size in
	let size - 1 -> sizeminus in
	let 0 -> i in
	let nil -> outvec in
	(
	  if (t == 0.0) then
	  (
	    set outvec = [1 (getPosXYZ (nth_list lpos 0))];
	    0;
	  )
	  else
	  (	 
      while ((i < size) && (outvec == nil)) do
    	(
    	  let nth_list lpos i -> nextpos in
        if t <=. (getPosTime nextpos) then
        (
          let nth_list lpos (i - 1) -> curpos in
          let if (curpos == nil) then nextpos else curpos -> curpos in
          let nth_list lpos (i - 2) -> prevpos in
          let if (prevpos == nil) then curpos else prevpos -> prevpos in
          let nth_list lpos (i + 1) -> nextnextpos in
          let if (nextnextpos == nil) then nextpos else nextnextpos -> nextnextpos in
          
          let (getPosTime nextpos) -. (getPosTime curpos) -> pdiff in
          let if (pdiff <=. 0.0) then 1.0 else pdiff -> pdiff in
          let ((t -. (getPosTime curpos)) /. pdiff) -> coef in
          
          //Update values from TCB
          let (1.0 -. (getPosTension curpos)) -> OneMinusTension in
          let (1.0 -. (getPosContinuity curpos)) -> OneMinusContinuity in
          let (1.0 +. (getPosContinuity curpos)) -> OnePlusContinuity in
          let (1.0 -. (getPosBias curpos)) -> OneMinusBias in
          let (1.0 +. (getPosBias curpos)) -> OnePlusBias in
          
          let (OneMinusTension *. 0.5) +. ((1.0 -. (getPosTension nextpos)) *. 0.5) -> OneMinusTension in
          let (OneMinusContinuity *. 0.5) +. ((1.0 -. (getPosContinuity nextpos)) *. 0.5) -> OneMinusContinuity in
          let (OnePlusContinuity *. 0.5) +. ((1.0 +. (getPosContinuity nextpos)) *. 0.5) -> OnePlusContinuity in
          let (OneMinusBias *. 0.5) +. ((1.0 -. (getPosBias nextpos)) *. 0.5) -> OneMinusBias in
          let (OneMinusBias *. 0.5) +. ((1.0 +. (getPosBias nextpos)) *. 0.5) -> OnePlusBias in
          
          let (0.5 *. ((OneMinusTension *. OnePlusContinuity *. OnePlusBias) *. ((getPosX curpos) -. (getPosX prevpos))) +. (0.5 *. (OneMinusTension *. OneMinusContinuity *. OneMinusBias) *. ((getPosX nextpos) -. (getPosX curpos)))) -> tancurposx in
          let (0.5 *. ((OneMinusTension *. OnePlusContinuity *. OnePlusBias) *. ((getPosY curpos) -. (getPosY prevpos))) +. (0.5 *. (OneMinusTension *. OneMinusContinuity *. OneMinusBias) *. ((getPosY nextpos) -. (getPosY curpos)))) -> tancurposy in
          let (0.5 *. ((OneMinusTension *. OnePlusContinuity *. OnePlusBias) *. ((getPosZ curpos) -. (getPosZ prevpos))) +. (0.5 *. (OneMinusTension *. OneMinusContinuity *. OneMinusBias) *. ((getPosZ nextpos) -. (getPosZ curpos)))) -> tancurposz in
    
          let (0.5 *. ((OneMinusTension *. OneMinusContinuity *. OnePlusBias) *. ((getPosX nextpos) -. (getPosX curpos))) +. (0.5 *. (OneMinusTension *. OnePlusContinuity *. OneMinusBias) *. ((getPosX nextnextpos) -. (getPosX nextpos)))) -> tannextposx in
          let (0.5 *. ((OneMinusTension *. OneMinusContinuity *. OnePlusBias) *. ((getPosY nextpos) -. (getPosY curpos))) +. (0.5 *. (OneMinusTension *. OnePlusContinuity *. OneMinusBias) *. ((getPosY nextnextpos) -. (getPosY nextpos)))) -> tannextposy in
          let (0.5 *. ((OneMinusTension *. OneMinusContinuity *. OnePlusBias) *. ((getPosZ nextpos) -. (getPosZ curpos))) +. (0.5 *. (OneMinusTension *. OnePlusContinuity *. OneMinusBias) *. ((getPosZ nextnextpos) -. (getPosZ nextpos)))) -> tannextposz in
          
          let getInterpolateCurve (getPosXYZ curpos) (getPosXYZ nextpos) [tancurposx tancurposy tancurposz] [tannextposx tannextposy tannextposz] coef -> [x y z] in
            set outvec = [i [x y z]];
          
          0;
        )
        else nil;
        
        set i = i + 1;
      );
    );
    outvec;
  );;


fun usePhysic(strobj)=
  let SO3SceneNodeGetBody strobj.OBJP_h3d -> body in
  let SO3BodyGetMassMatrix body -> [mass _] in
    if ((strobj.OBJP_iSrcMode != 0) || (body == nil) || (SO3BodyGetFluid body) || !(V3DphysGetState c3dXsession) || (mass <=. 0.0)) then 0 else 1;;


fun getTargetAxis(edstr)=
  if (edstr.OBJP_iToAxis == 0) then
    [1.0 0.0 0.0]
  else if (edstr.OBJP_iToAxis == 1) then
    [(-.1.0) 0.0 0.0]
  else if (edstr.OBJP_iToAxis == 2) then
    [0.0 1.0 0.0]
  else if (edstr.OBJP_iToAxis == 3) then
    [0.0 (-.1.0) 0.0]
  else if (edstr.OBJP_iToAxis == 4) then
    [0.0 0.0 1.0]
  else
    [0.0 0.0 (-.1.0)];;


fun getViewDirection(strobj, ovec, oang, tvec)=
  let ovec -> [vx vy vz] in
  let tvec -> [dx dy dz] in
  //TODO enable vertors XYZ XZ
  let normalizeVectorF (subVectorF [dx vy dz] ovec) -> dir in
  let normalizeVectorF (SO3MathsQuatGetDirection oang getTargetAxis strobj) -> src in
  let SO3MathsQuatToEulerPYR (SO3MathsGetRotationTo src dir) -> [pitch yaw roll] in
  let if ((1.0 +. dotVectorF src dir) <. 0.0001) then PIf *. 2.0 else yaw -> yaw in
  let SO3MathsQuatAdd SO3MathsEulerPYRToQuat [0.0 yaw 0.0] oang -> nquat in
  (
    nquat;
  );;


fun cbMoveObj(inst, sessionstr, etime, strobj, cbend)=
  let (strobj.OBJP_kps * (set strobj.OBJP_iTick = strobj.OBJP_iTick + etime)) / 1000 -> rtick in
  if (rtick < 1) then nil else
  (
    let (1000.0 /. (itof SO3WorldGetFPS sessionstr.V3D_session)) -> nbsec in
    let [nbsec nbsec nbsec] -> vnbsec in
    (
      if ((strobj.OBJP_coef >=. 1.0) && (strobj.OBJP_fDirection == 1.0)) || ((strobj.OBJP_coef <=. 0.0) && (strobj.OBJP_fDirection == (-.1.0))) then
      (
        if (strobj.OBJP_iState != 1) then nil else
        (
          set strobj.OBJP_iTick = 0;
          
          // event
          if (!strobj.OBJP_bLoop) then
          (
            if ((!strobj.OBJP_bPingPong) || ((strobj.OBJP_bPingPong && (strobj.OBJP_fDirection == (-.1.0))))) then
            (
              set strobj.OBJP_posindex = 0;
              set strobj.OBJP_iState = 0;
              set strobj.OBJP_fDirection = 1.0;
              setPluginInstanceCbScenePreRenderPhysic strobj.OBJP_inst nil;
              
              let SO3SceneNodeGetBody strobj.OBJP_h3d -> body in
              if !(usePhysic strobj) then nil else
              (
                SO3BodySetVelocity body [0.0 0.0 0.0];
                SO3BodySetOmega body [0.0 0.0 0.0];
              );
              
              exec cbend with [strobj];
              0;
            )
            else
            (
              set strobj.OBJP_fDirection = strobj.OBJP_fDirection *. (-.1.0);
              0;
            );
          )
          else if (!strobj.OBJP_bPingPong) then
          (
            set strobj.OBJP_posindex = 0;
            set strobj.OBJP_angcoef = 0.0;
            set strobj.OBJP_coef = 0.0;
            set strobj.OBJP_fDirection = 1.0;
            0;
          )
          else
          (
            set strobj.OBJP_fDirection = strobj.OBJP_fDirection *. (-.1.0);
            0;
          );
        );
      )
      else
      (
        let (itof rtick) *. (1.0 /. (itof strobj.OBJP_nbKeys)) *. strobj.OBJP_fDirection -> nstep in
          set strobj.OBJP_coef = if (strobj.OBJP_coef +. nstep) >. 1.0 then 1.0 else if (strobj.OBJP_coef +. nstep) <=. 0.0 then 0.0 else strobj.OBJP_coef +. nstep;
        
        let getInterpolateTCB strobj.OBJP_targetPos strobj.OBJP_coef -> [index tvec] in
        let nth_list strobj.OBJP_targetPos (index - 1) -> [spos sang sscale _ t1] in
        let nth_list strobj.OBJP_targetPos index -> [dpos dang dscale _ t2] in      
        let (SO3ObjectGetGlobalPosition strobj.OBJP_h3d) -> ovec in
        let (SO3ObjectGetGlobalOrientation strobj.OBJP_h3d) -> oang in
        (
          if strobj.OBJP_oldindex != index then
          (
            let (if t1 == nil then 0.0 else t1) -> t1 in
            let (if t2 == nil then 1.0 else t2) -> t2 in
            let t2 -. t1 -> lenght in
            let if lenght == 0.0 then 1.0 else lenght -> lenght in
            let lenght /. (1.0 /. (itof strobj.OBJP_nbKeys)) -> nbk in
              set strobj.OBJP_angstep = (1.0 /. nbk);
  
            set strobj.OBJP_angcoef = if (strobj.OBJP_fDirection == 1.0) then 0.0 else 1.0;
            set strobj.OBJP_oldindex = index;
          )
          else nil;
         
          let (itof rtick) *. strobj.OBJP_angstep *. strobj.OBJP_fDirection -> nangstep in
            set strobj.OBJP_angcoef = if (strobj.OBJP_angcoef +. nangstep) >. 1.0 then 1.0 else if (strobj.OBJP_angcoef +. nangstep) <. 0.0 then 0.0 else strobj.OBJP_angcoef +. nangstep;

          let if strobj.OBJP_bToTarget then getViewDirection strobj ovec oang tvec else SO3MathsQuatInterpolate sang dang strobj.OBJP_angcoef 1 -> tang in
          let vecLerpF sscale dscale strobj.OBJP_angcoef -> tscale in
          (
            let SO3SceneNodeGetBody strobj.OBJP_h3d -> body in
            if !(usePhysic strobj) then
            (
              if strobj.OBJP_bLocal then
              (
                SO3ObjectSetPosition strobj.OBJP_h3d tvec;
                SO3ObjectSetOrientation strobj.OBJP_h3d tang;
              )
              else
              (
                SO3ObjectSetGlobalPosition strobj.OBJP_h3d tvec;
                SO3ObjectSetGlobalOrientation strobj.OBJP_h3d tang;
              );
              SO3ObjectSetScale strobj.OBJP_h3d tscale;
              0;
            )
            else
            let subVectorF (if strobj.OBJP_bLocal then addVectorF (SO3ObjectGetGlobalPosition SO3ObjectGetParent strobj.OBJP_h3d) (SO3MathsQuatGetDirection (SO3ObjectGetGlobalOrientation SO3ObjectGetParent strobj.OBJP_h3d) multiplyVectorF (SO3ObjectGetGlobalScale SO3ObjectGetParent strobj.OBJP_h3d) tvec) else tvec) ovec  -> nvec in
            let multiplyVectorF nvec vnbsec -> vel in
            let SO3MathsQuatDiff (if strobj.OBJP_bLocal then SO3MathsQuatAdd tang (SO3ObjectGetGlobalOrientation SO3ObjectGetParent strobj.OBJP_h3d) else tang) oang -> qdiff in
            let SO3MathsQuatToEulerPYR qdiff -> vang in
            /*
            let if ((absf (SO3MathsRadianToDegree vtx)) >=. 180.0) then (-.vtx +. (SO3MathsDegreeToRadian 180.0)) else vtx -> vtx in 
            let if ((absf (SO3MathsRadianToDegree vty)) >=. 180.0) then (-.vty +. (SO3MathsDegreeToRadian 180.0)) else vty -> vty in
            let if ((absf (SO3MathsRadianToDegree vtz)) >=. 180.0) then (-.vtz +. (SO3MathsDegreeToRadian 180.0)) else vtz -> vtz in
            */
            let multiplyVectorF vang vnbsec -> omega in
            (
              SO3BodySetFreeze body 0;
              SO3ObjectSetScale strobj.OBJP_h3d tscale;
              //SO3BodyMoveTo body tvec 0.3;
              //SO3BodyRotateTo body tang 1.0;
              SO3BodySetVelocity body vel;
              SO3BodySetOmega body omega;
              0;
            );
          );
          0;
        );
        set strobj.OBJP_iTick = 0;
      );
    );
  );
  0;;

/*
fun getTCBLength(strobj, speed)=
  let 0.0 -> ndata in
  let 0.0 -> i in
  let 1.0 /. ((itof strobj.OBJP_fps) /. speed) -> stp in
  let nil -> prevpos in
  (
    while i <=. 1.0 do
    (
      let getInterpolateTCB strobj.OBJP_srcpos::strobj.OBJP_targetPos::nil i -> [index tvec] in
      (
        if prevpos == nil || tvec == nil then nil else
          let prevpos -> [xa ya za] in
          let tvec -> [xb yb zb] in
          let sqrt ( (sqr(xa -. xb)) +. (sqr(ya -. yb)) +. (sqr(za -. zb)) ) -> dist in
            set ndata = ndata +. dist;
        
        if tvec == nil then nil else
          set prevpos = tvec;
      );
      set i = i +. stp;
    );
    ndata;
  );;
*/

fun cbObjEnd(strobj)=
  SendPluginEvent strobj.OBJP_inst "End" nil nil;
  0;;


fun cbStopPath(inst, from, action, param, reply, strobj)=
  setPluginInstanceCbScenePreRenderPhysic strobj.OBJP_inst nil;  
  set strobj.OBJP_iState = 0;
  set strobj.OBJP_posindex = 0;
  set strobj.OBJP_angcoef = 0.0;
  set strobj.OBJP_coef = 0.0;
  set strobj.OBJP_fDirection = 1.0;
	0;;


fun cbPausePath(inst, from, action, param, reply, strobj)=
  setPluginInstanceCbScenePreRenderPhysic strobj.OBJP_inst nil; 
  let SO3SceneNodeGetBody strobj.OBJP_h3d -> body in 
  (
    SO3BodySetVelocity body [0.0 0.0 0.0];
    SO3BodySetOmega body [0.0 0.0 0.0];
  );
  
  set strobj.OBJP_iState = 2;
	0;;


fun cbPlayPath(inst, from, action, param, reply, strobj)=
  if ((strobj.OBJP_iState == 1) || ((sizelist strobj.OBJP_targetPos) < 2)) then nil else
  (
    let SO3SceneNodeGetBody strobj.OBJP_h3d -> body in
    if !(usePhysic strobj) then nil else
    (
      SO3BodySetVelocity body [0.0 0.0 0.0];
      SO3BodySetOmega body [0.0 0.0 0.0];
    );
    
    if (strobj.OBJP_iState != 0) then nil else
    (
      SendPluginEvent strobj.OBJP_inst "Started" nil nil;
      set strobj.OBJP_angcoef = 0.0;
      set strobj.OBJP_coef = 0.0;
    );       
    
    set strobj.OBJP_iState = 1;
    set strobj.OBJP_iTick = 0;
    
    setPluginInstanceCbScenePreRenderPhysic strobj.OBJP_inst mkfun4 mkfun5 @cbMoveObj @cbObjEnd strobj;
  );
  0;;


fun cbPlayReversedPath(inst, from, action, param, reply, strobj)=
  if ((sizelist strobj.OBJP_targetPos) < 2) then nil else
  (
    if (strobj.OBJP_iState == 1) then
    (
      set strobj.OBJP_fDirection = strobj.OBJP_fDirection *. (-.1.0);
      0;
    )
    else
    (    
      let SO3SceneNodeGetBody strobj.OBJP_h3d -> body in
      if !(usePhysic strobj) then nil else
      (
        SO3BodySetVelocity body [0.0 0.0 0.0];
        SO3BodySetOmega body [0.0 0.0 0.0];
      );
      
      if (strobj.OBJP_iState != 0) then nil else
      (
        SendPluginEvent strobj.OBJP_inst "Started" nil nil;
      );
      
      set strobj.OBJP_iState = 1;
      set strobj.OBJP_iTick = 0;
      set strobj.OBJP_fDirection = strobj.OBJP_fDirection *. (-.1.0);
      setPluginInstanceCbScenePreRenderPhysic strobj.OBJP_inst mkfun4 mkfun5 @cbMoveObj @cbObjEnd strobj;
      0;
    );
  );
  0;;


fun objRelease(strobj)=
  setPluginInstanceCbScenePreRenderPhysic strobj.OBJP_inst nil;
  
  let strobj.OBJP_inipos -> [vec ang scale] in
  (
    SO3ObjectSetPosition strobj.OBJP_h3d vec;
    SO3ObjectSetOrientation strobj.OBJP_h3d ang;
    SO3ObjectSetScale strobj.OBJP_h3d scale;
  );
  
  set strobj.OBJP_iState = 0;
  0;;


fun deleteOb(inst, strobj)=
  objRelease strobj;
  0;;
  
  
  

  
/*
mylib/routes/2014-07-07_rafael-pylaia-allatini.txt
Route1
initsession\ 
02258.330217 510.0 4035.413286 30.48 25000.0 0.445 0.380
ninitparser\ 
-32700 15500 -40300 9 11 12 1

routecam
initsession\ 40.600984\\\ 22.981315\\\ 510.0\\\ 30.48\\\ 1500000.0\\\ 0.445\\\ 0.380\\\ 110\\\ -5900\\\ 164.3\ninitparser\ 0\\\ 15500\\\ 0\\\ 9\\\ 11\\\ 12
inst_arcadia route1
initsession\ 02258.330217\\\ 510.0\\\ 4035.413286\\\ 30.48\\\ 25000.0\\\ 0.445\\\ 0.380\ninitparser\ -32700\\\ 15500\\\ -40300\\\ 9\\\ 11\\\ 12\\\ 1

mylib/routes/ntepo_filtered.txt
ninitsession\
02258.338751 510.0 4035.496991 30.48 25000.0 0.445 0.380
\ninitparser\ 
27000 15500 10000 9 11 12

inst_red route2
ninitsession 
40.589226 22.964331 510.0 30.48 1500000.0 0.445 0.380
\ninitparser\ 
0 15500 0 9 11 12

routecam2
ninitsession\ 40.589226\\\ 22.964331\\\ 510.0\\\ 30.48\\\ 1500000.0\\\ 0.445\\\ 0.380\\\ 110\\\ -5900\\\ 164.3\ninitparser\ 0\\\ 15500\\\ 0\\\ 9\\\ 11\\\ 12
inst_arcadia route1
initsession\ 02258.338751\\\ 510.0\\\ 4035.496991\\\ 30.48\\\ 25000.0\\\ 0.445\\\ 0.380\ninitparser\ 27000\\\ 15500\\\ 10000\\\ 9\\\ 11\\\ 12

mylib/routes/voulg31bus.txt
routecam2
ninitsession\ 40.627138\\\ 22.957114\\\ 510.0\\\ 30.48\\\ 1500000.0\\\ 0.445\\\ 0.380\ninitparser\ 0\\\ 15500\\\ 0\\\ 9\\\ 11\\\ 12
blue_pointer Route2.1
initsession\ 40.627138\\\ 22.957114\\\ 510.0\\\ 30.48\\\ 1500000.0\\\ 0.445\\\ 0.380\ninitparser\ 0\\\ 15500\\\ 0\\\ 9\\\ 11\\\ 12


mylib/routes/kamara_filtered.txt
red_pointer Route2.1
initsession\ 40.627138\\\ 22.957114\\\ 510.0\\\ 30.48\\\ 1500000.0\\\ 0.445\\\ 0.380\ninitparser\ 0\\\ 15500\\\ 0\\\ 9\\\ 11\\\ 12\\\ 0\\\ 0


mylib/routes/allatini-voulgari31.txt
green pointer
ninitsession\ 40.606909\\\ 22.966084\\\ 510.0\\\ 30.48\\\ 1500000.0\\\ 0.445\\\ 0.380\ninitparser\ 0\\\ 15500\\\ 0\\\ 9\\\ 11\\\ 12
blue pointer
ninitsession\ 40.606909\\\ 22.966084\\\ 510.0\\\ 30.48\\\ 1500000.0\\\ 0.445\\\ 0.380\ninitparser\ 0\\\ 15500\\\ 0\\\ 9\\\ 11\\\ 12


mylib/routes/aristot_dn_filtered.txt
blue pointer route2.1
initsession\ 40.635496\\\ 22.943427\\\ 510.0\\\ 30.48\\\ 1500000.0\\\ 0.240\\\ 0.190\ninitparser\ 0\\\ 15500\\\ 0\\\ 9\\\ 11\\\ 12

*/  
  
 
fun getNParam(param, word) =
  let strextr param -> sesdata in 
  let nth_list sesdata 0 -> l in 
  nth_list l (word-1);;    
 
/*NMEA GPGGA lon lat to degrees */
/*NMEA lat  0302.78469 = 03 + (02.78469/60) = 3.046412  decimal*/	
/*NMEA lon 10141.82531 = 101 + 41.82531/60) = 101.6971  decimal*/	
fun NMEA2dec(strobj, n, islat) = 
  //_echo "NMEA2dec:"::n::nil 
  let atoi getNParam strobj.OBJP_lastpos 2 -> c2 in
  let atoi getNParam strobj.OBJP_lastpos 3 -> c3 in		
  let (c2-2) -> lenLat in
  let (c3-3) -> lenLon in  
  
  if (islat) then
  (
    let atof substr n 0 2 -> p1 in
    let atof substr n 2 lenLat -> q1 in
	
	p1 +. (q1 /. 60.0)
  )	
  else
  (
    let atof substr n 0 3 -> p1 in
    let atof substr n 3 lenLon -> q1 in
	
	p1 +. (q1 /. 60.0)
  );;	 

fun CheckNumChars(str, sta, end) =
  if (sta == end) then
    0 
  else
    let nth_char str sta -> c in
      if (((c >= '0) && (c <= '9)) || (c == '.)) then
        CheckNumChars str (sta + 1) end
      else
        1;;  
  
/*read data from line array	*/
fun GetData(line, n) =
  let 1 -> i in
  let 0 -> ind1 in
  let 0 -> ind2 in
  (
    while (i < n) do
    (
      set ind1 = 1 + strfind "," line ind1;
      set i = i + 1;
    );
    set ind1 = 1 + strfind "," line ind1;
    set ind2 = strfind "," line ind1;
    substr line ind1 (ind2 - ind1);
  );;   
  
fun CheckIntegrity(strobj, line) =

      /* SAVE OBJECT ROUTE LOG IN SESSION DIR */
      //saveLog "backroute.txt" strcat line "\n";
	  
	  let atoi getNParam strobj.OBJP_lastpos 1 -> c1 in
	  let atoi getNParam strobj.OBJP_lastpos 2 -> c2 in
	  let atoi getNParam strobj.OBJP_lastpos 3 -> c3 in	  

      if (!strcmp (substr line 0 6) "$PGRME") then
      (
        nil;
      )
      else if (!strcmp (substr line 0 6) "$PGRMZ") then
      (
        let GetData line 1 -> data in
          if ((atoi data) != nil) then
            "$PGRMZ"::data::nil
          else
            nil;
      )
      else if (!strcmp (substr line 0 6) "$GPRMC") then
      (
        let GetData line 1 -> dataTim in
        let GetData line 2 -> dataVal in
        let GetData line 3 -> dataLat in
        let GetData line 4 -> dataNor in
        let GetData line 5 -> dataLon in
        let GetData line 6 -> dataEas in
        let GetData line 7 -> dataRun in
        let GetData line 8 -> dataAng in
		
        let if ((strlen dataTim) == c1) then 0 else 1 -> errTim in
        let if !strcmp dataVal "A" then 0 else 1 -> errVal in
        let if (((strlen dataLat) == c2) && (dataLat != nil) && (strcmp dataLat nil) && (strcmp dataLat "")) then 0 else 1 -> errLat in
        let if !strcmp dataNor "N" then 0 else 1 -> errNor in
        let if (((strlen dataLon) == c3) && (dataLon != nil) && (strcmp dataLon nil) && (strcmp dataLon "")) then 0 else 1 -> errLon in
        let if !strcmp dataEas "E" then 0 else 1 -> errEas in
        /* No control for dataRun */
        let (errTim + errVal + errLat + errNor + errLon + errEas) -> error in
        let strfind "." dataAng 0 -> ind in
        let strlen dataAng -> len in
          if ((error == 0) && ((atof dataAng) != nil) && (ind == (len - 2)) && (ind != 0) && ((CheckNumChars dataAng 0 len) == 0)) then
            "$GPRMC"::dataAng::nil
          else
            nil;
      )
      else if (!strcmp (substr line 0 6) "$GPGGA") then
      (
        let GetData line 1 -> dataTim in
        let GetData line 2 -> dataLat in
        let GetData line 3 -> dataNor in
        let GetData line 4 -> dataLon in
        let GetData line 5 -> dataEas in

        let if ((strlen dataTim) == c1) then 0 else 1 -> errTim in
        let if (((strlen dataLat) == c2) && (dataLat != nil) && (strcmp dataLat nil) && (strcmp dataLat "")) then 0 else 1 -> errLat in
        let if !strcmp dataNor "N" then 0 else 1 -> errNor in
        let if (((strlen dataLon) == c3) && (dataLon != nil) && (strcmp dataLon nil) && (strcmp dataLon "")) then 0 else 1 -> errLon in
        let if !strcmp dataEas "E" then 0 else 1 -> errEas in
        let (errTim + errLat + errNor + errLon + errEas) -> error in
          if (error ==0) then
            "$GPGGA"::dataLat::dataLon::nil
          else
            nil;
      )
      else if (!strcmp (substr line 0 6) "cbTick") then
      (
        "cbTick"::nil;
      )
      else
        nil;;  
  
/*read data array */  
fun readRouteFile(strobj, line, saveValues) =
    _echo strobj strcat "readNMEA:" line;
	let saveValues -> [vX vY vZ aX aY aZ] in
	let strobj.OBJP_center -> [cX cY cZ] in
	let strobj.OBJP_scale -> [sX sY sZ] in
	let strobj.OBJP_offset -> [oX oY oZ] in
	let strobj.OBJP_scaleM -> sM in
	let strobj.OBJP_yfix -> yF in	
	let CheckIntegrity strobj line -> l in
	(
      if (l == nil) then
      (		
        0;
      )
      else if (!strcmp (hd l) "$PGRME") then
      (
	    //_fooS strcat "NMEA PGRME:" itoa index;
        _echo strobj strcat "NMEA PGRME:" line;		
        0;
      )
      else if (!strcmp (hd l) "$PGRMZ") then
	  (
	    let atof (hd tl l) -> data in
        let if (yF >. 0.0) then yF 
		    else ((data -. cY) *. sY) -> delta in
        (
		  set iY = oY +. delta;
		  
		  //let GetObjPosition O3d -> [iX Oy iZ] in
		  //SO3ObjectGetScale edstr.ETRACK_child
		  
          if (data==nil) then
          (
            set iErrV = iErrV +. 1.0;
            0;
          )
          /*else if (absf (iY -. iOldY) >. iMaxDVer *. iErrV) then //<<<<< !!!!
          (
            set iErrV = iErrV +. 1.0;
            _fooS strcatn "NMEA Err (pos Y):"::line::"-"::(ftoa iErrV)::"-["::(ftoa iY)::"]"::nil;
            _echo strobj "NMEA Err (pos Y):"::line::"-"::(ftoa iErrV)::"-["::(ftoa iY)::"]"::nil; 			
            0;
          )*/
          else
          (
            set iErrV = 1.0;
            /*set iOldY = Oy; 
			
			if interpolateFlag then
			   Interpolate O3d [iX Oy iZ] [iX iY iZ]		
			else
			   M3setObjVec session O3d [iX iY iZ]; 
			*/  
	
			//cbAddListFromFile p [vX iY vZ] [aX aY aZ]; 
	        mutate saveValues <- [_ iY _ _ _ _];	
            //_fooS strcatn "NMEA PGRMZ :"::line::nil; //(ftoa iX)::","::(ftoa iY)::","::(ftoa iZ)::nil;					
            _echo strobj strcatn "NMEA PGRMZ :"::line::nil; //(ftoa iX)::","::(ftoa iY)::","::(ftoa iZ)::nil;					
            0;
          );
        );
        0;		
      )
      else if (!strcmp (hd l) "$GPRMC") then
      (
        let atof (hd tl l) -> data in
        (
          if (data==nil) then 0
          else
		  let if (data >.180.0) then (180.0 -. data) else data -> rY in
          (
			/*let GetObjAngle O3d -> [Ory Orx Orz] in
			let OptimizeDestOrientation [Ory Orx Orz] [(ftoi (-.65536.0 *. ((atof data) /. 360.0))) 0 0] -> optAng in 	
	
			if interpolateAnglesFlag then
			  InterpolateAng O3d [Ory Orx Orz] optAng
			else		  
			  M3setObjAng session O3d optAng;*/	
			  			
				
            mutate saveValues <- [_ _ _ _ rX _];				
			//_fooS strcatn "NMEA GPRMC :"::line::"-"::(ftoa rY)::",0,0"::nil;
			_echo strobj strcatn "NMEA GPRMC :"::line::"-"::(ftoa rY)::",0,0"::nil;			
            0  
          );
        );
        0;
      )
      else if (!strcmp (hd l) "$GPGGA") then
      (
        let NMEA2dec strobj (hd tl l) 1 -> latitude in
  		let NMEA2dec strobj (hd tl tl l) 0 -> longitude in
        ( 
		  set iX = ((longitude -. cX) *. (sM /. sX)) +. oX;
          set iZ = ((latitude -. cZ) *. (sM /. sZ)) +. oZ;			  

		  //let GetObjPosition O3d -> [Ox iY Oz] in
		  //SO3ObjectGetScale edstr.ETRACK_child
		  
		  /*let sqrt (sqr (iX -. iOldX)) +. (sqr (iZ -. iOldZ)) -> ss in
          if (ss >. iMaxDHor *. iErrH) then //!!!!!!!!!!!!!
          (
            set iErrH = iErrH +. 1.0;
			_fooS strcatn "NMEA Err (pos XZ):"::line::(ftoa ss)::nil;
			_echo strobj strobj strcatn "NMEA Err (pos XZ):"::line::(ftoa ss)::nil;
            0;
          )
          else
          (*/
            set iErrH = 1.0;
            /*set iOldX = Ox; */
            /*set iOldZ = Oz; */
			
			/*if interpolateFlag then
			  Interpolate O3d [Ox iY Oz] [iX iY iZ]
			else
			  M3setObjVec session O3d [iX iY iZ];
			  */
			  	
            //cbAddListFromFile p [iX 0.0 iZ] [aX aY aZ];
            mutate saveValues <- [iX _ iZ _ _ _];			
			//_fooS strcatn "NMEA GPGGA :"::line::nil;
			_echo strobj strcatn "NMEA GPGGA :"::line::nil;			
            0;
          /*); */
        );        
        0;
	  )
      else
        0;	  
	  
	  //readRouteFile tl list index+1 strobj saveValues;
      set strobj.OBJP_iLine = strobj.OBJP_iLine + 1;	  
	  saveValues
     );;   
	 	 
	 
fun routeObj(sessionstr, etime, strobj, cbend)=
  let (strobj.OBJP_kps * (set strobj.OBJP_iTick = strobj.OBJP_iTick + etime)) / 1000 -> rtick in
  if (rtick < 1) then nil else
  (
    let (1000.0 /. (itof SO3WorldGetFPS sessionstr.V3D_session)) -> nbsec in
    let [nbsec nbsec nbsec] -> vnbsec in
    (
      if ((strobj.OBJP_coef >=. 1.0) && (strobj.OBJP_fDirection == 1.0)) || ((strobj.OBJP_coef <=. 0.0) && (strobj.OBJP_fDirection == (-.1.0))) then
      (
        if (strobj.OBJP_iState != 1) then nil else
        (
          set strobj.OBJP_iTick = 0;
          
          // event
          if (!strobj.OBJP_bLoop) then
          (
            if ((!strobj.OBJP_bPingPong) || ((strobj.OBJP_bPingPong && (strobj.OBJP_fDirection == (-.1.0))))) then
            (
              set strobj.OBJP_posindex = 0;
              set strobj.OBJP_iState = 0;
              set strobj.OBJP_fDirection = 1.0;
              setPluginInstanceCbScenePreRenderPhysic strobj.OBJP_inst nil;
              
              let SO3SceneNodeGetBody strobj.OBJP_h3d -> body in
              if !(usePhysic strobj) then nil else
              (
                SO3BodySetVelocity body [0.0 0.0 0.0];
                SO3BodySetOmega body [0.0 0.0 0.0];
              );
              
              exec cbend with [strobj];
              0;
            )
            else
            (
              set strobj.OBJP_fDirection = strobj.OBJP_fDirection *. (-.1.0);
              0;
            );
          )
          else if (!strobj.OBJP_bPingPong) then
          (
            set strobj.OBJP_posindex = 0;
            set strobj.OBJP_angcoef = 0.0;
            set strobj.OBJP_coef = 0.0;
            set strobj.OBJP_fDirection = 1.0;
            0;
          )
          else
          (
            set strobj.OBJP_fDirection = strobj.OBJP_fDirection *. (-.1.0);
            0;
          );
        );
      )
      else
      (
        let (itof rtick) *. (1.0 /. (itof strobj.OBJP_nbKeys)) *. strobj.OBJP_fDirection -> nstep in
          set strobj.OBJP_coef = if (strobj.OBJP_coef +. nstep) >. 1.0 then 1.0 else if (strobj.OBJP_coef +. nstep) <=. 0.0 then 0.0 else strobj.OBJP_coef +. nstep;
        
        let getInterpolateTCB strobj.OBJP_targetPos strobj.OBJP_coef -> [index tvec] in
        let nth_list strobj.OBJP_targetPos (index - 1) -> [spos sang sscale _ t1] in
        let nth_list strobj.OBJP_targetPos index -> [dpos dang dscale _ t2] in      
        let (SO3ObjectGetGlobalPosition strobj.OBJP_h3d) -> ovec in
        let (SO3ObjectGetGlobalOrientation strobj.OBJP_h3d) -> oang in
        (
          if strobj.OBJP_oldindex != index then
          (
            let (if t1 == nil then 0.0 else t1) -> t1 in
            let (if t2 == nil then 1.0 else t2) -> t2 in
            let t2 -. t1 -> lenght in
            let if lenght == 0.0 then 1.0 else lenght -> lenght in
            let lenght /. (1.0 /. (itof strobj.OBJP_nbKeys)) -> nbk in
              set strobj.OBJP_angstep = (1.0 /. nbk);
  
            set strobj.OBJP_angcoef = if (strobj.OBJP_fDirection == 1.0) then 0.0 else 1.0;
            set strobj.OBJP_oldindex = index;
          )
          else nil;
         
          let (itof rtick) *. strobj.OBJP_angstep *. strobj.OBJP_fDirection -> nangstep in
            set strobj.OBJP_angcoef = if (strobj.OBJP_angcoef +. nangstep) >. 1.0 then 1.0 else if (strobj.OBJP_angcoef +. nangstep) <. 0.0 then 0.0 else strobj.OBJP_angcoef +. nangstep;

          let if strobj.OBJP_bToTarget then getViewDirection strobj ovec oang tvec else SO3MathsQuatInterpolate sang dang strobj.OBJP_angcoef 1 -> tang in
          let vecLerpF sscale dscale strobj.OBJP_angcoef -> tscale in
          (
            let SO3SceneNodeGetBody strobj.OBJP_h3d -> body in
            if !(usePhysic strobj) then
            (
              if strobj.OBJP_bLocal then
              (
                SO3ObjectSetPosition strobj.OBJP_h3d tvec;
                SO3ObjectSetOrientation strobj.OBJP_h3d tang;
              )
              else
              (
                SO3ObjectSetGlobalPosition strobj.OBJP_h3d tvec;
                SO3ObjectSetGlobalOrientation strobj.OBJP_h3d tang;
              );
              SO3ObjectSetScale strobj.OBJP_h3d tscale;
              0;
            )
            else
            let subVectorF (if strobj.OBJP_bLocal then addVectorF (SO3ObjectGetGlobalPosition SO3ObjectGetParent strobj.OBJP_h3d) (SO3MathsQuatGetDirection (SO3ObjectGetGlobalOrientation SO3ObjectGetParent strobj.OBJP_h3d) multiplyVectorF (SO3ObjectGetGlobalScale SO3ObjectGetParent strobj.OBJP_h3d) tvec) else tvec) ovec  -> nvec in
            let multiplyVectorF nvec vnbsec -> vel in
            let SO3MathsQuatDiff (if strobj.OBJP_bLocal then SO3MathsQuatAdd tang (SO3ObjectGetGlobalOrientation SO3ObjectGetParent strobj.OBJP_h3d) else tang) oang -> qdiff in
            let SO3MathsQuatToEulerPYR qdiff -> vang in
            /*
            let if ((absf (SO3MathsRadianToDegree vtx)) >=. 180.0) then (-.vtx +. (SO3MathsDegreeToRadian 180.0)) else vtx -> vtx in 
            let if ((absf (SO3MathsRadianToDegree vty)) >=. 180.0) then (-.vty +. (SO3MathsDegreeToRadian 180.0)) else vty -> vty in
            let if ((absf (SO3MathsRadianToDegree vtz)) >=. 180.0) then (-.vtz +. (SO3MathsDegreeToRadian 180.0)) else vtz -> vtz in
            */
            let multiplyVectorF vang vnbsec -> omega in
            (
              SO3BodySetFreeze body 0;
              SO3ObjectSetScale strobj.OBJP_h3d tscale;
              //SO3BodyMoveTo body tvec 0.3;
              //SO3BodyRotateTo body tang 1.0;
              SO3BodySetVelocity body vel;
              SO3BodySetOmega body omega;
              0;
            );
          );
          0;
        );
        set strobj.OBJP_iTick = 0;
      );
    );
  );
  0;;	 
  
  

fun readRouteLine(strobj, line) =
  let if line!=nil then line else strobj.OBJP_iLine -> l in
  let nth_list strobj.OBJP_routePath l -> line in 
  line;;
  
  
fun cbRouteObj(inst, sessionstr, etime, strobj, cbend)= 
  let nil -> lpos in
  let readRouteFile strobj readRouteLine strobj nil [0.0 0.0 0.0 0.0 0.0 0.0] -> [posx posy posz angx angy angz] in
  (
    set lpos = [[posx posy posz] SO3MathsEulerPYRToQuat [SO3MathsDegreeToRadian angx SO3MathsDegreeToRadian angy SO3MathsDegreeToRadian angz] [1.0 1.0 1.0] [0.0 0.0 0.0] 0.1]::lpos;      
	set strobj.OBJP_targetPos = lpos;
	
    routeObj sessionstr etime strobj cbend;
  );	
  0;;	 
 
fun AnalyseAndFilter(l) =
  if (l == nil) then
    l
  else if ((!strcmp (substr (hd l) 0 6) "$PGRME")
        || (!strcmp (substr (hd l) 0 6) "$PGRMZ")
        || (!strcmp (substr (hd l) 0 6) "$GPRMC")
        || (!strcmp (substr (hd l) 0 6) "$GPGGA")
        || (!strcmp (substr (hd l) 0 6) "cbTick")) then
    (hd l)::(AnalyseAndFilter (tl l))
  else
    AnalyseAndFilter (tl l);;	 
  
fun openRouteFile(file, strobj) =  
  let lineextr _getpack _checkpack file -> data in   
  //readRouteFile AnalyseAndFilter data 0 strobj [0.0 0.0 0.0 0.0 0.0 0.0];
  let AnalyseAndFilter data -> adata in
  
  //if ((strobj.OBJP_iState == 1) || ((sizelist strobj.OBJP_targetPos) < 2)) then nil else
  if (adata==nil) then nil
  else
  (
    set iErrV = 0.0;	 
    set iErrH = 0.0;	
    set strobj.OBJP_routePath = adata;	
	set strobj.OBJP_iLine = 0;
   
    let SO3SceneNodeGetBody strobj.OBJP_h3d -> body in
    if !(usePhysic strobj) then nil else
    (
      SO3BodySetVelocity body [0.0 0.0 0.0];
      SO3BodySetOmega body [0.0 0.0 0.0];
    );
    
    if (strobj.OBJP_iState != 0) then nil else
    (
      SendPluginEvent strobj.OBJP_inst "Started" nil nil;
      set strobj.OBJP_angcoef = 0.0;
      set strobj.OBJP_coef = 0.0;
    );       
    
    set strobj.OBJP_iState = 1;
    set strobj.OBJP_iTick = 0;
	
    setPluginInstanceCbScenePreRenderPhysic strobj.OBJP_inst mkfun4 mkfun5 @cbRouteObj @cbObjEnd strobj;
  );
  0;;   
   
fun cbDownloaded(file, data, strobj)=
  if data == nil then nil else
  let strcatn sTmpDownloadPath::(getPluginInstanceName strobj.OBJP_inst)::".route"::nil -> tmpfile in
  (
    //_fooS "SAVE FILE (WEB-SCOL)\n";
    _storepack data tmpfile;
  );
  0;;
  
  
fun downloadRouteFile(strobj, file, param)=
  _fooS "DnLoading route file: start\n";
   
   let (getPluginInstanceParam strobj.OBJP_inst "path") -> path in
   let atoi (getPluginInstanceParam strobj.OBJP_inst "isurl") -> isurl in
   let if isurl == nil then 0 else isurl -> isurl in
   let (getPluginInstanceParam strobj.OBJP_inst "url") -> url in     
   
  if (file!=nil) then
  (  
     _fooS "(SCOL Server)\n";
	 
     let lineextr param -> [name[long _]] in
     if (atoi long) <= maxDownloadSize then
     (
	   //_echo strobj strcatn "**RESOURCE : ObName = "::(ObName o)::"-"::(name)::nil 
	   //_echo strobj "**RESOURCE : download..."
	   //_RSCdownload this name name mkfun3 @cbDownloaded strobj;
	   
	   0;
	 )
     else nil;
  )
  else
  if (url!=nil) then
  ( 
    _fooS "(WEB Server)\n";
    downloadFile url mkfun3 @cbDownloaded strobj;
	nil
  )
  else 
	let strcatn sTmpDownloadPath::(getPluginInstanceName strobj.OBJP_inst)::".tmp"::nil -> tmpfile in
	let _getpack _checkpack path -> data in
	( 	
	  _fooS "SAVE FILE (LOCAL)\n";	
	  _storepack data tmpfile;
      0
	);;  


fun cbRoutePlay(inst, from, action, param, reply, strobj)= 
  let (getPluginInstanceParam inst "path") -> path in
  let atoi (getPluginInstanceParam inst "isurl") -> isurl in
  let (getPluginInstanceParam inst "url") -> url in
  
  if (!isurl) then 
    openRouteFile path strobj
  else
    //downloadFile url mkfun3 @cbDownloaded strobj; 
    0;;


fun cbRouteStop(inst, from, action, param, reply, strobj)= 0;;

fun cbRoutePause(inst, from, action, param, reply, strobj)=	0;;  

  
  
/*** load data array (prerender method...) *****/  
fun exeRouteFile(list, index, strobj, saveValues) =  
  if list==nil then nil
  else
	let saveValues -> [vX vY vZ aX aY aZ] in
	let strobj.OBJP_center -> [cX cY cZ] in
	let strobj.OBJP_scale -> [sX sY sZ] in
	let strobj.OBJP_offset -> [oX oY oZ] in
	let strobj.OBJP_scaleM -> sM in
	let strobj.OBJP_yfix -> yF in
    let hd list -> line in
	let CheckIntegrity strobj line -> l in
	(
      if (l == nil) then
      (
	    //_fooS strcat "NMEA LINE:" itoa index;
        0;
      )
      else if (!strcmp (hd l) "$PGRME") then
      (
	    //_fooS strcat "NMEA PGRME:" itoa index;		
        0;
      )
      else if (!strcmp (hd l) "$PGRMZ") then
	  (
        let atof (hd tl l) -> data in
        let if (yF >. 0.0) then yF 
		    else ((data -. cY) *. sY) -> delta in
        (
		  set iY = oY +. delta;
		 
          if (data==nil) then
          (
            set iErrV = iErrV +. 1.0;
            0;
          )
          /*else if (absf (iY -. vY) >. iMaxDVer *. iErrV) then //<<<<< !!!!
          (
            set iErrV = iErrV +. 1.0;
            _fooS strcatn "NMEA Err (pos Y):"::(itoa index)::"-"::(ftoa iErrV)::"-["::(ftoa iY)::"]"::nil;			
            0;
          )*/
          else
          (
            set iErrV = 1.0;

			//_fooS strcatn "NMEA PGRMZ :"::(itoa index)::nil; //(ftoa iX)::","::(ftoa iY)::","::(ftoa iZ)::nil;		
			//cbAddListFromFile p [vX iY vZ] [aX aY aZ]; 
	        mutate saveValues <- [_ iY _ _ _ _];			//iY !!!!!!!
            0;
          );
        );
        0;		
      )
      else if (!strcmp (hd l) "$GPRMC") then
      (
        let atof (hd tl l) -> data in
        (
          if (data==nil) then 0
          else
		  let if (data >.180.0) then (180.0 -. data) else data -> rY in
          (			  
			//let (-.65536.0 *. (data /. 360.0)) -> rY in
			//_fooS strcatn "NMEA GPRMC :"::(itoa index)::"-"::(ftoa rY)::",0,0"::nil;
            //cbAddListFromFile p [vX vY vZ] [aX rY aZ];	
            mutate saveValues <- [_ _ _ _ rY _];				 //!!!
            0;
          );
        );
        0;
      )
      else if (!strcmp (hd l) "$GPGGA") then
      (
        let NMEA2dec strobj (hd tl l) 1 -> latitude in
  		let NMEA2dec strobj (hd tl tl l) 0 -> longitude in
        ( 
		  set iX = ((longitude -. cX) *. (sM /. sX)) +. oX;
          set iZ = ((latitude -. cZ) *. (sM /. sZ)) +. oZ;		  

		  /*let sqrt (sqr (iX -. vX)) +. (sqr (iZ -. vZ)) -> ss in
          if (ss >. iMaxDHor *. iErrH) then //!!!!!!!!!!!!!
          (
            set iErrH = iErrH +. 1.0;
			_fooS strcatn "NMEA Err (pos XZ):"::(itoa index)::(ftoa ss)::nil;
            0;
          )
          else
          (*/
            set iErrH = 1.0;			
			//_fooS strcatn "NMEA GPGGA :"::(itoa index)::nil;
            //cbAddListFromFile p [iX vY iZ] [aX aY aZ];
            mutate saveValues <- [iX _ iZ _ _ _];			
            0;
          /*); */
        );        
        0;
	  )
      else
        0;	  
	  
	  exeRouteFile tl list index+1 strobj saveValues;	  
	  0
     );; 

fun loadPos2(inst, strobj) =
  let (getPluginInstanceParam inst "path") -> path in
  let atoi (getPluginInstanceParam inst "isurl") -> isurl in
  let (getPluginInstanceParam inst "url") -> url in
  
  if (!isurl) then 
  (
    let lineextr _getpack _checkpack path -> data in   
    let AnalyseAndFilter data -> adata in
    let exeRouteFile adata 0 strobj [0.0 0.0 0.0 0.0 0.0 0.0] -> coords in 
    (
	    set iErrV = 0.0;	 
        set iErrH = 0.0;	
        //set strobj.OBJP_routePath = adata;
        set strobj.OBJP_iLine = 0;	
        //....		
	)	
  )	
  else
    //downloadFile url mkfun3 @cbDownloaded strobj; 
    0;;

fun loadPos(inst)=
  let nil -> lpos in
  let 0 -> i in
  (
    let atof getPluginInstanceParam inst (strcat "posx_" (itoa i)) -> posx in
    let atof getPluginInstanceParam inst (strcat "posy_" (itoa i)) -> posy in
    let atof getPluginInstanceParam inst (strcat "posz_" (itoa i)) -> posz in
    
    let atof getPluginInstanceParam inst (strcat "angx_" (itoa i)) -> angx in
    let atof getPluginInstanceParam inst (strcat "angy_" (itoa i)) -> angy in
    let atof getPluginInstanceParam inst (strcat "angz_" (itoa i)) -> angz in
    
    let atof getPluginInstanceParam inst (strcat "scalex_" (itoa i)) -> scalex in
    let atof getPluginInstanceParam inst (strcat "scaley_" (itoa i)) -> scaley in
    let atof getPluginInstanceParam inst (strcat "scalez_" (itoa i)) -> scalez in

    let atof getPluginInstanceParam inst (strcat "T_" (itoa i)) -> T in
    let atof getPluginInstanceParam inst (strcat "C_" (itoa i)) -> C in
    let atof getPluginInstanceParam inst (strcat "B_" (itoa i)) -> B in
    let atof getPluginInstanceParam inst (strcat "D_" (itoa i)) -> D in
    while (posx != nil) do
    (
      set lpos = [[posx posy posz] SO3MathsEulerPYRToQuat [SO3MathsDegreeToRadian angx SO3MathsDegreeToRadian angy SO3MathsDegreeToRadian angz] [scalex scaley scalez] [T C B] D]::lpos;    
      
      set i = i + 1;
      set posx = atof getPluginInstanceParam inst (strcat "posx_" (itoa i));
      set posy = atof getPluginInstanceParam inst (strcat "posy_" (itoa i));
      set posz = atof getPluginInstanceParam inst (strcat "posz_" (itoa i));
      
      set angx = atof getPluginInstanceParam inst (strcat "angx_" (itoa i));
      set angy = atof getPluginInstanceParam inst (strcat "angy_" (itoa i));
      set angz = atof getPluginInstanceParam inst (strcat "angz_" (itoa i));
      
      set scalex = atof getPluginInstanceParam inst (strcat "scalex_" (itoa i));
      set scaley = atof getPluginInstanceParam inst (strcat "scaley_" (itoa i));
      set scalez = atof getPluginInstanceParam inst (strcat "scalez_" (itoa i));
  
      set T = atof getPluginInstanceParam inst (strcat "T_" (itoa i));
      set C = atof getPluginInstanceParam inst (strcat "C_" (itoa i));
      set B = atof getPluginInstanceParam inst (strcat "B_" (itoa i));
      set D = atof getPluginInstanceParam inst (strcat "D_" (itoa i));
    );
    revertlist lpos;
  );;


fun newOb(inst)=
  let (getPluginInstanceParam inst "sourceobject") -> sourcename in
  let atoi (getPluginInstanceParam inst "loop") -> loop in
  let atoi (getPluginInstanceParam inst "ping") -> ping in
  let atoi (getPluginInstanceParam inst "target") -> target in
  let atoi (getPluginInstanceParam inst "axis") -> axis in
  let atoi (getPluginInstanceParam inst "init") -> init in
  let atoi (getPluginInstanceParam inst "local") -> local in
  let if (local == nil) then 0 else local -> local in
  let atoi (getPluginInstanceParam inst "kps") -> kps in
  let atoi (getPluginInstanceParam inst "nbkeys") -> nbkeys in  
  
  let atof (getPluginInstanceParam inst "xdir") -> xdir in
  let atof (getPluginInstanceParam inst "ydir") -> ydir in
  let atof (getPluginInstanceParam inst "zdir") -> zdir in
  let if xdir == nil then 0.0 else xdir -> xdir in
  let if ydir == nil then 0.0 else ydir -> ydir in
  let if zdir == nil then (-.1.0) else zdir -> zdir in 

  let atof (getPluginInstanceParam inst "cx") -> cx in
  let atof (getPluginInstanceParam inst "cy") -> cy in
  let atof (getPluginInstanceParam inst "cz") -> cz in
  let atof (getPluginInstanceParam inst "sx") -> sx in
  let atof (getPluginInstanceParam inst "sy") -> sy in
  let atof (getPluginInstanceParam inst "sz") -> sz in
  let atof (getPluginInstanceParam inst "ox") -> ox in
  let atof (getPluginInstanceParam inst "oy") -> oy in
  let atof (getPluginInstanceParam inst "oz") -> oz in	
  let atof (getPluginInstanceParam inst "sM") -> sM in
  let atof (getPluginInstanceParam inst "yfix") -> yfix in
  let (getPluginInstanceParam inst "lastpos") -> lastpos in  

  let V3DgetObjectByName c3dXsession sourcename -> source in
  let V3DgetObjectTypeByName sourcename -> isourcemode in

  let mkTObjPath [inst source isourcemode nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil 0 nil nil nil nil nil nil nil] -> strobj in 
  (
    set strobj.OBJP_tDir = [xdir ydir zdir];
    set strobj.OBJP_kps = kps;
    set strobj.OBJP_nbKeys = nbkeys;
    set strobj.OBJP_inipos = [(SO3ObjectGetPosition strobj.OBJP_h3d) (SO3ObjectGetOrientation strobj.OBJP_h3d) (SO3ObjectGetScale strobj.OBJP_h3d)];
    set strobj.OBJP_posindex = 0;
    set strobj.OBJP_oldindex = nil;
    set strobj.OBJP_angcoef = 0.0;
    set strobj.OBJP_angstep = 0.0;
    set strobj.OBJP_coef = 0.0;
    set strobj.OBJP_bLoop = loop;
    set strobj.OBJP_targetPos = loadPos inst;
    set strobj.OBJP_fDirection = 1.0;
    set strobj.OBJP_bPingPong = ping;
    set strobj.OBJP_bToTarget = target;
    set strobj.OBJP_iToAxis = axis;
    set strobj.OBJP_bLocal = local;
    set strobj.OBJP_iState = 0;
	
    set strobj.OBJP_center = [cx cy cz];
    set strobj.OBJP_scale = [sx sy sz];
    set strobj.OBJP_offset = [ox oy oz];
    set strobj.OBJP_scaleM = sM;
    set strobj.OBJP_yfix = yfix;
    set strobj.OBJP_lastpos = lastpos; 	
    
    PluginRegisterAction inst "Play" mkfun6 @cbPlayPath strobj;
    PluginRegisterAction inst "Pause" mkfun6 @cbPausePath strobj;
	PluginRegisterAction inst "Stop" mkfun6 @cbStopPath strobj;
    PluginRegisterAction inst "Reverse" mkfun6 @cbPlayReversedPath strobj;

	//PluginRegisterAction inst "Goto next pos" mkfun6 @cbNextPos strobj;
	//PluginRegisterAction inst "Goto prev pos" mkfun6 @cbNextPos strobj;
	
    PluginRegisterAction inst "rPlay" mkfun6 @cbRoutePlay strobj;
    PluginRegisterAction inst "rPause" mkfun6 @cbRoutePause strobj;
	PluginRegisterAction inst "rStop" mkfun6 @cbRouteStop strobj;	
		
	if (!init) then nil else
	  cbPlayPath inst nil nil nil nil strobj;
	  
	_echo strobj "Route2: Started";  
		
    setPluginInstanceCbDel inst mkfun2 @deleteOb strobj;
  );
  0;;


fun IniPlug(file)=
  PlugRegister @newOb nil;
  setPluginEditor @dynamicedit;
  0;;