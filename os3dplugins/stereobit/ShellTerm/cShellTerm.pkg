/*
-----------------------------------------------------------------------------
This source file is part of OpenSpace3D
For the latest info, see http://scol.stereobit.gr

Copyright (c) 2016 stereobit.networlds

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA, or go to
http://www.gnu.org/copyleft/lesser.txt

-----------------------------------------------------------------------------
*/

/*******************************************************************************
 Plugin ShellTerm
 Client part
 Version: 1.0
 Author: stereobit.networlds, Bastien BOURINEAU
 Date: 21/01/2016
 Last update: 21/01/2016
*******************************************************************************/

struct PlugPicture = [
  PICT_instance                : PInstance,
  PICT_bOnMaterial             : I,
  PICT_Material                : SO3_MATERIAL,
  PICT_iBuffer                 : I,
  PICT_ifmsizex                : I,
  PICT_ifmsizey                : I,
  
  PICT_win                     : SO3_WIDGET,
  PICT_AlphaBuffer             : AlphaBitmap,
  
  PICT_iPosX                   : I,
  PICT_iPosY                   : I,
  PICT_iWidth                  : I,
  PICT_iHeight                 : I,
  PICT_tPercent                : [I I I I I I I I],
  PICT_tAlign                  : [I I],
  
  PICT_bTransparency           : I,
  PICT_iOpacity                : I,
  PICT_iTransition             : I,
  PICT_fTransOpacity           : F,
  
  PICT_font                    : ObjFont,
  PICT_cvfont                  : ObjBTFont,
  PICT_sLabel                  : S,
  PICT_ifColor                 : I,  
  
  PICT_bUrl                    : I,
  PICT_sPath                   : S,  
  PICT_bBackground             : I,
  PICT_bShow                   : I,
  PICT_httpReq                 : ObjCURL,
   
  PICT_xMatrix                 : I,
  PICT_yMatrix                 : I,  
  PICT_fontMatrix              : [[AlphaBitmap I I I I S I I I I SO3_WIDGET] r1],
  PICT_tCursor                 : I

  ] MkPlugPicture;;


var sTmpDownloadPath = "tmp/pictures/";;

var iTexWidth = 512;;
var iTexHeight = 512;;


var log=1;;
var debug=0;;

var server=0;; /*when scol server is on */



fun _echo(pictstr,s)= 
   if (log==1) then
	SendPluginEvent pictstr.PICT_instance "echo" s nil
   else
     nil;;
	 
/*** see at contextHelp event ***/
fun eventParam(a, b) = 
  strbuild ("ref"::a::nil)::("userParam"::b::nil)::nil;;

fun searchSlash(string, pos)=
  let strfind "/" string pos -> r in
  if r != nil then
    searchSlash string r+1
  else
    pos;;
	

fun createImage(ch,w,h) = _CRbitmap ch w h;; 
fun cpyImage(dest, dx, dy, source, sx, sy, sw, sh, trans)= _CPbitmap24 dest 0 0 source sx sy sw sh trans;; 

fun createAlphaImage(ch,w,h) = _CRalphaBitmap ch (_CRbitmap ch w h) (_CRbitmap8 ch w h) nil 0;;

fun computePosSize(pictstr, vw, vh)=
  let pictstr.PICT_tPercent -> [px py pw ph xo yo wo ho] in
  let pictstr.PICT_tAlign -> [ax ay] in
  let if pw then (ftoi (((itof pictstr.PICT_iWidth) /. 100.0) *. (itof vw))) + wo else pictstr.PICT_iWidth -> pw in
  let if ph then (ftoi (((itof pictstr.PICT_iHeight) /. 100.0) *. (itof vh))) + ho else pictstr.PICT_iHeight -> ph in
  let if px then (ftoi (((itof pictstr.PICT_iPosX) /. 100.0) *. (itof vw))) + xo else pictstr.PICT_iPosX -> px in
  let if (ax == 1) then ((vw / 2) - (pw / 2)) + px else if (ax == 2) then (vw - pw) - px  else px -> px in
  let if py then (ftoi (((itof pictstr.PICT_iPosY) /. 100.0) *. (itof vh))) + yo else pictstr.PICT_iPosY -> py in
  let if (ay == 1) then ((vh / 2) - (ph / 2)) + py else if (ay == 2) then (vh - ph) - py else py -> py in
    [px py pw ph];;	 
	
fun print_r	(list) = 
  if list == nil then
    nil
  else 
  ( let hd list -> [_ x y sx sy c v _ _ _ _] in
    _fooS strcatn "print_r:"::(itoa x)::"-"::(itoa y)::"-"::(itoa v)::"-"::c::nil;
    print_r tl list;
	0
  );; 		
	 

fun createMXWidget(viewportstr, id, x, y, sx, sy) = 
  SO3BitmapWidgetCreate (V3DgetSession c3dXsession) viewportstr.V3D_viewport (strcat "matrixCtrl_" id) x y sx sy 100;;


/*create font matrix [bmp x y screenx screeny char view blink time(ms)]::*/
fun setMatrix(pictstr, viewportstr, matrix, m)=
  if (matrix==nil) then
    nil
  else
  ( 
	let m -> j in
	let createAlphaImage _channel pictstr.PICT_ifmsizex pictstr.PICT_ifmsizey -> abmp in
	let hd matrix -> [_ _ _ _ _ _ _ _ _ _ mxwidget] in
	(
	 //_echo strcatn "CMATRIX:"::(itoa i)::","::(itoa j)::","::(itoa xs)::","::(itoa ys)::nil
	 
	 set mxwidget = createMXWidget viewportstr (itoa j) pictstr.PICT_iPosX pictstr.PICT_iPosY pictstr.PICT_ifmsizex pictstr.PICT_ifmsizey;
	 SO3WidgetSetVisibility mxwidget 0;                   
	 
	 /******************** init widget visibility ***************/
     V3DaddWidgetControl viewportstr mxwidget;
     SO3WidgetSetTopOnFocus mxwidget 0;
     SO3WidgetSetForeground mxwidget 1;		
     SO3WidgetSetKeyboardEnable mxwidget 0;
     SO3WidgetSetMouseEnable mxwidget 0;
     SO3WidgetSetTransparency mxwidget pictstr.PICT_bTransparency;
     SO3WidgetSetOpacity mxwidget (itof pictstr.PICT_iOpacity) *. 0.01;
     SO3WidgetSetVisibility mxwidget 0;	 
	 
	 let pictstr.PICT_iPosY + (pictstr.PICT_ifmsizey*j) -> ym in
	 mutate hd matrix <- [abmp 0 j pictstr.PICT_iPosX ym "" 0 0 0 0 mxwidget];
	 
	 set j = j + 1;
     setMatrix pictstr viewportstr tl matrix j;
     0
	)	
  );;

fun makeFontMatrix(pictstr, rx, ry, dim) = 
  //let if dim!=nil then dim else [0 0 xbox ybox] -> [dx dy dw dh] in
  let (V3DgetDefaultViewport (V3DgetSessionView c3dXsession)) -> viewportstr in
 /* let if (rx!=nil)||(ry!=nil) then [rx ry] else V3DgetViewSize (V3DgetSessionView c3dXsession) -> [ScreenW ScreenH] in
  let (ScreenW/(dw+sep)) -> wMatrix in
  let (ScreenH/(dh+sep)) -> hMatrix in
  let (wMatrix*hMatrix) -> sMatrix in
  */
  
  let nil -> matrix in  
  let 0 -> i in    
  ( /*init matrix*/
    while (i < pictstr.PICT_iBuffer) do
	(
	 set matrix = [nil 0 0 0 0 nil 0 0 0 0 nil]::matrix;
	 set i = i + 1;
	 0
	);
	setMatrix pictstr viewportstr matrix 1;
    matrix
  );; 

fun createFontMatrix(pictstr, resizex, resizey, dim) =  
	let V3DgetViewSize (V3DgetSessionView c3dXsession) -> [ScreenW ScreenH] in
	let makeFontMatrix pictstr resizex resizey dim -> matrix in
	(
	  _fooS strcat "Create Terminal Matrix" "\n";
	  set pictstr.PICT_fontMatrix = matrix;
	  set pictstr.PICT_xMatrix = 1;
	  set pictstr.PICT_yMatrix = pictstr.PICT_iBuffer;	  
	  0
    );; 
	


fun resetMatrix(pictstr, viewportstr, matrix, m)=
  if (matrix==nil) then
    nil
  else
  ( 
    let m -> j in
	let hd matrix -> [abmp _ _ _ _ _ v _ _ _ mxwidget] in
	(
	 let pictstr.PICT_iPosY + (pictstr.PICT_ifmsizey*j) -> ym in
	 
     SO3WidgetSetPosition mxwidget pictstr.PICT_iPosX ym;
     SO3WidgetSetSize mxwidget pictstr.PICT_ifmsizex pictstr.PICT_ifmsizey;	 
	 
     if (abmp==nil || v==0) then nil else
     (	 
	   SO3WidgetSetVisibility mxwidget v;
	   SO3BitmapWidgetBlitAlpha mxwidget abmp;
	   0
	 );  
	 
	 //_fooS strcatn "Reset Terminal Matrix:"::(itoa i)::"-"::(itoa j)::nil;
	 
	 set j = j + 1;
     resetMatrix pictstr viewportstr tl matrix j;
     0
	)	
  );;  
  
fun resetFontMatrix (pictstr, rx, ry, dim) =  
  let if dim!=nil then dim else [0 0 pictstr.PICT_ifmsizex pictstr.PICT_ifmsizey] -> [dx dy dw dh] in
  let (V3DgetDefaultViewport (V3DgetSessionView c3dXsession)) -> viewportstr in
  let if (rx!=nil)||(ry!=nil) then [rx ry] else V3DgetViewSize (V3DgetSessionView c3dXsession) -> [ScreenW ScreenH] in
  (
    _fooS strcat "Reset Terminal Matrix" "\n";
    resetMatrix pictstr viewportstr pictstr.PICT_fontMatrix 1;
  0);; 	
  
  
fun refreshMXWidget(list) = 
  if list == nil then
    nil
  else 
    let hd list -> [abmp _ _ _ _ _ _ _ _ _ mxwidget] in
    (   
      SO3BitmapWidgetBlitAlpha mxwidget abmp;
	  refreshMXWidget tl list;
	  0
    );;	   

  
fun deleteMXWidget(list, viewportstr) = 
  if list == nil then
    nil
  else 
    let hd list -> [abmp _ _ _ _ _ _ _ _ _ mxwidget] in
    (   
      V3DremoveWidgetControl viewportstr mxwidget;
      SO3WidgetDestroy mxwidget;
      //set mxwidget = nil;
      _DSalphaBitmap abmp;
      //set abmp = nil;	  
	  mutate hd list <- [nil _ _ _ _ _ _ _ _ _ nil];
	  deleteMXWidget tl list viewportstr;
	  0
    );;	  
	
fun deleteFontMatrix(pictstr) = 
  let (V3DgetDefaultViewport (V3DgetSessionView c3dXsession)) -> viewportstr in
  deleteMXWidget pictstr.PICT_fontMatrix viewportstr;
  set pictstr.PICT_fontMatrix = nil;
  _fooS strcat "Delete Terminal Matrix" "\n";
  0;;   
	

fun clsFontMatrix(list) =
  if list == nil then
    nil
  else
    let hd list -> [_ _ _ _ _ _ _ _ _ _ mxwidget] in
    ( 
      SO3WidgetSetVisibility mxwidget 0;
	  mutate hd list <- [_ _ _ _ _ _ 0 0 0 0 _];
      clsFontMatrix tl list;
	  0
    );;  

fun clsTerminal(fontMatrix) = 
  clsFontMatrix fontMatrix;
  0;; 
  
fun clsFontMatrixLine(pictstr,list,line) =
  if list == nil then
    nil
  else 
  ( let (pictstr.PICT_xMatrix*line)+1 -> xy in
    let 0 -> i in
    while (i<pictstr.PICT_xMatrix) do
	( mutate nth_list list xy+i <- [_ _ _ _ _ _ 0 0 0 0 _];
	  set i = i + 1;
	  0
	);	
  0);;	
  
  
  
fun drawLabel(abmp, pictstr, s)=
  let _GETalphaBitmaps abmp -> [bmp bmp8] in
  let _GETbitmapSize bmp -> [bw bh] in
  
  if (_platform != SCOL_PLATFORM_WINDOWS) then
  (
    _BTDRAWtextAlphaBitmap abmp pictstr.PICT_cvfont [bw/2 bh/2] BT_TEXT_HORIZ_CENTERED|BT_TEXT_VERT_CENTER pictstr.PICT_ifColor 255 pictstr.PICT_sLabel;
    0;
  )
  else
  (
    let G2DgetStringSize pictstr.PICT_font pictstr.PICT_sLabel -> [_ th] in
    (
      _DRAWtext bmp pictstr.PICT_font (bw / 2) ((bh / 2) - (th / 2)) TD_CENTER pictstr.PICT_ifColor pictstr.PICT_sLabel;
      _DRAWtext8 bmp8 pictstr.PICT_font (bw / 2) ((bh / 2) - (th / 2)) TD_CENTER 0xffffff pictstr.PICT_sLabel;
    );
    0;
  );
  0;;	  
	  
fun writeTerminal(pictstr, s) = //,b,t) =
  if pictstr.PICT_fontMatrix == nil then
    nil
  else 
    let nth_list pictstr.PICT_fontMatrix pictstr.PICT_tCursor -> [abmp x y _ _ _ v t b _ mxwidget] in
    (   	   
       let _CRbitmap _channel pictstr.PICT_ifmsizex pictstr.PICT_ifmsizey -> bmp24 in
       let _CRbitmap8 _channel pictstr.PICT_ifmsizex pictstr.PICT_ifmsizey -> bmp8 in
       let _CRalphaBitmap _channel bmp24 bmp8 nil nil -> adraw in 

       let _GETalphaBitmaps abmp -> [colorLayer alphaLayer] in 
       let _GETalphaBitmaps adraw -> [colorDraw alphaDraw] in 
       (
         _CPbitmap24 colorDraw 0 0 colorLayer 0 0 pictstr.PICT_ifmsizex pictstr.PICT_ifmsizey nil;
         _CPbitmap8 alphaDraw 0 0 bmp8 0 0 pictstr.PICT_ifmsizex pictstr.PICT_ifmsizey nil;
		 
         drawLabel adraw pictstr s;
         SO3BitmapWidgetBlitAlpha mxwidget adraw;		 
       );	   
	   
       //let if (t>0) then _tickcount else 0 -> timer in
	   //let if (b>0) then _tickcount else 0 -> blink in	   
	   mutate nth_list pictstr.PICT_fontMatrix pictstr.PICT_tCursor <- [_ 0 pictstr.PICT_tCursor _ _ s 1 0 0 _ _];	
	   set pictstr.PICT_tCursor = pictstr.PICT_tCursor + 1;
	   0
    );;
	
	/*
  if pictstr.PICT_fontMatrix == nil then
    nil
  else 
    let (pictstr.PICT_xMatrix*c)+x -> xy in 
	let 0 -> i in	
	while (i< strlen s) do
	(  let if (t>0) then _tickcount else 0 -> timer in
	   let if (b>0) then _tickcount else 0 -> blink in
	   let nth_list pictstr.PICT_fontMatrix (xy+i) -> [abmp x y sx sy _ _ _ _ _ _] in
	   ( 
	     //_fooS strcat "Write to terminal:" c;
	     mutate nth_list pictstr.PICT_fontMatrix (xy+i) <- [abmp _ _ _ _ c 1 blink timer _ _];	

	     set i = i + 1;	 
	   0) 
	);;*/
	//print_r pictstr.PICT_fontMatrix;;	
	 
	 
  
fun hideTerminal(list) =
  if list == nil then
    nil
  else 
    let hd list -> [_ _ _ _ _ _ _ _ _ _ mxwidget] in
    (   
      SO3WidgetSetVisibility mxwidget 0;
	  mutate hd list <- [_ _ _ _ _ _ 0 0 0 0 mxwidget];
	  hideTerminal tl list;
	  0
    );;    
  
  
fun showTerminal(list) =
  if list == nil then
    nil
  else 
    let hd list -> [_ _ _ _ _ _ _ _ _ _ mxwidget] in
    (   
      SO3WidgetSetVisibility mxwidget 1;
	  mutate hd list <- [_ _ _ _ _ _ 1 _ _ _ mxwidget];
	  showTerminal tl list;
	  0
    );;   
   
  
fun resizeTerminal(pictstr, rx, ry, dim) = 
  //deleteFontMatrix pictstr; 
  //createFontMatrix pictstr rx ry dim;
  resetFontMatrix pictstr rx ry dim;
  0;;

	
fun blitTerminal(matrix, pictstr) = 
  if matrix == nil then
    nil
  else 
    let hd matrix -> [abmp _ _ sx sy c v b t _ mxwidget] in
	(
	  //_fooS strcat "Render:" c; 
      if (v==0) then 
	    blitTerminal tl matrix pictstr
	  else  
	  (   
	    //_fooS strcat "BitBlt:" c;
	    SO3WidgetSetVisibility mxwidget v;
		if (abmp==nil || !v) then nil else SO3BitmapWidgetBlitAlpha mxwidget abmp;
		blitTerminal tl matrix pictstr;
		0
	  );0);;		       
  
  
fun createTerminal(inst, pictstr) = 
  let V3DgetViewSize (V3DgetSessionView c3dXsession) -> [ScreenW ScreenH] in
  let computePosSize pictstr ScreenW ScreenH -> [px py pw ph] in
  createFontMatrix pictstr nil nil [px py pw ph];
  0;;
  
fun cbWriteTerminal(inst, from, action, param, reply, pictstr)= 
  writeTerminal pictstr param;
  0;;

fun cbClsTerminal(inst, from, action, param, reply, pictstr)= 
  clsTerminal pictstr.PICT_fontMatrix;
  0;;  


/***********************************************************************/


fun cbControlPreRenderShow(inst, sessionstr, etime, pictstr)=
  let (itof pictstr.PICT_iOpacity) /. (itof pictstr.PICT_iTransition) -> step in
  (
    set pictstr.PICT_fTransOpacity = pictstr.PICT_fTransOpacity +. (step *. (itof etime));
    if pictstr.PICT_fTransOpacity >=. (itof pictstr.PICT_iOpacity) then
    (
      SO3WidgetSetOpacity pictstr.PICT_win (itof pictstr.PICT_iOpacity) *. 0.01;
      setPluginInstanceCbScenePreRender inst nil;
      SendPluginEvent inst "Shown" nil nil;
      0;
    )
    else
    (
      SO3WidgetSetOpacity pictstr.PICT_win (pictstr.PICT_fTransOpacity *. 0.01);
      0;
    );
  );
  0;;


fun cbControlPreRenderHide(inst, sessionstr, etime, pictstr)=
  let (itof pictstr.PICT_iOpacity) /. (itof pictstr.PICT_iTransition) -> step in
  (
    set pictstr.PICT_fTransOpacity = pictstr.PICT_fTransOpacity -. (step *. (itof etime));
    if pictstr.PICT_fTransOpacity <=. 0.0 then
    (
      SO3WidgetSetOpacity pictstr.PICT_win 0.0;
      setPluginInstanceCbScenePreRender inst nil;
      SO3WidgetSetVisibility pictstr.PICT_win 0;
      SendPluginEvent inst "Hidden" nil nil;
      0;
    )
    else
    (
      SO3WidgetSetOpacity pictstr.PICT_win (pictstr.PICT_fTransOpacity *. 0.01);
      0;
    );
  );
  0;;


fun cbShow(inst, from, action, param, reply, pictstr)=
  if (pictstr.PICT_iTransition == 0) then
  (
    SO3WidgetSetVisibility pictstr.PICT_win 1;
	
	//showTerminal pictstr.PICT_fontMatrix; //show black boxes of matrix
    
    //force render update (used for loading screens)
    if (pictstr.PICT_bOnMaterial) then nil else
    let V3DgetSessionView c3dXsession -> viewstr in
      SO3BufferUpdate viewstr.V3D_buffer;
    
    SendPluginEvent inst "Shown" nil nil;
    0;
  )
  else
  (
    SO3WidgetSetOpacity pictstr.PICT_win (pictstr.PICT_fTransOpacity *. 0.01);
    SO3WidgetSetVisibility pictstr.PICT_win 1;
    setPluginInstanceCbScenePreRender inst mkfun4 @cbControlPreRenderShow pictstr;
    0;
  );
  
  set pictstr.PICT_bShow = 1;
  0;;


fun cbHide(inst, from, action, param, reply, pictstr)=
  if (pictstr.PICT_iTransition == 0) then
  (
    SO3WidgetSetVisibility pictstr.PICT_win 0;
	
	hideTerminal pictstr.PICT_fontMatrix;
    
    //force render update (used for loading screens)
    //let V3DgetSessionView c3dXsession -> viewstr in
      //SO3BufferUpdate viewstr.V3D_buffer;
    SendPluginEvent inst "Hidden" nil nil;
    0;
  )
  else
  (
    SO3WidgetSetOpacity pictstr.PICT_win (pictstr.PICT_fTransOpacity *. 0.01);
    setPluginInstanceCbScenePreRender inst mkfun4 @cbControlPreRenderHide pictstr;
    0;
  );
  
  set pictstr.PICT_bShow = 0;
  0;;


fun cbResizeCtrl(inst, viewstr, vw, vh, pictstr)=
  if pictstr.PICT_win == nil || pictstr.PICT_bOnMaterial then nil else
  let computePosSize pictstr vw vh -> [px py pw ph] in
  (
    SO3WidgetSetPosition pictstr.PICT_win px py;
    SO3WidgetSetSize pictstr.PICT_win pw ph;
    SO3BitmapWidgetBlitAlpha pictstr.PICT_win pictstr.PICT_AlphaBuffer;
	
	resizeTerminal pictstr vw vh [px py pw ph];
	blitTerminal pictstr.PICT_fontMatrix pictstr;
	//_fooS strcat "blitBlt terminal :" "resize\n";
  );
  0;;
  
  
fun cbControlPreRenderBlitTerminal(inst, sessionstr, etime, pictstr) = 
  blitTerminal pictstr.PICT_fontMatrix pictstr;
  //_fooS strcat "blitBlt terminal:" "PreRender\n";
  0;;  
  
fun cb3dClick(inst, viewstr, x, y, b, pictstr)= 
  setPluginInstanceCbScenePreRender inst mkfun4 @cbControlPreRenderBlitTerminal pictstr;
  0;; 

fun cb3dDbClick(inst, viewstr, x, y, b, pictstr)= 
  setPluginInstanceCbScenePreRender inst mkfun4 @cbControlPreRenderBlitTerminal pictstr;
  0;;
  

fun createPicture(inst, pictstr)=
  let (V3DgetDefaultViewport (V3DgetSessionView c3dXsession)) -> viewportstr in
  if pictstr.PICT_win != nil then nil else
  (
    V3DremoveWidgetControl viewportstr pictstr.PICT_win;
    SO3WidgetDestroy pictstr.PICT_win;
    (
      let SO3ViewportGetPixelPositionSize viewportstr.V3D_viewport -> [_ _ vw vh] in
      let computePosSize pictstr vw vh -> [px py pw ph] in
        set pictstr.PICT_win = SO3BitmapWidgetCreate (V3DgetSession c3dXsession) viewportstr.V3D_viewport (strcat (getPluginInstanceName inst) "_pictureCtrl") px py pw ph 100;

      SO3WidgetSetTopOnFocus pictstr.PICT_win 0;
      SO3WidgetSetForeground pictstr.PICT_win 1;
      0;
    );
    
    V3DaddWidgetControl viewportstr pictstr.PICT_win;
    SO3WidgetSetKeyboardEnable pictstr.PICT_win 0;
    SO3WidgetSetMouseEnable pictstr.PICT_win 0;
    SO3WidgetSetTransparency pictstr.PICT_win pictstr.PICT_bTransparency;
    SO3WidgetSetOpacity pictstr.PICT_win (itof pictstr.PICT_iOpacity) *. 0.01;
    SO3WidgetSetVisibility pictstr.PICT_win 0;
  );
  0;;


fun cbDownloaded(file, data, pictstr)=
  if data == nil then nil else
  let strcatn sTmpDownloadPath::(getPluginInstanceName pictstr.PICT_instance)::".tmp"::nil -> tmpfile in
  (
    _storepack data tmpfile;
    let G2DloadAlphaBmp _channel tmpfile -> bmp in
    if bmp == nil then nil else
    (
      _DSalphaBitmap pictstr.PICT_AlphaBuffer;
      set pictstr.PICT_AlphaBuffer = bmp;
      
      SO3BitmapWidgetBlitAlpha pictstr.PICT_win pictstr.PICT_AlphaBuffer;
    );
  );
  0;;


fun cbSetPosition(inst, from, action, param, reply, pictstr)=
if param == nil then nil else
  let strextr param -> lp in
  let (nth_list (hd lp) 0) -> sx in
  let (nth_list (hd lp) 1) -> sy in
  let V3DgetViewSize (V3DgetSessionView c3dXsession) -> [vw vh] in
  (
    let 0 -> xpercent in
    let if (!strcmp "%" (substr sx ((strlen sx) - 1) 1)) then
        (
          set xpercent = 1;
          atoi sx;
        )
        else
          atoi sx
    -> px in
    let 0 -> ypercent in
    let if (!strcmp "%" (substr sy ((strlen sy) - 1) 1)) then
        (
          set ypercent = 1;
          atoi sy;
        )
        else
          atoi sy
    -> py in
    let [(if px == nil then 0 else px) (if py == nil then 0 else py)] -> [px py] in
    (
      mutate pictstr.PICT_tPercent <- [xpercent ypercent _ _ _ _ _ _];
      set pictstr.PICT_iPosX = px;
      set pictstr.PICT_iPosY = py;
      
      let computePosSize pictstr vw vh -> [px py pw ph] in
      (
        SO3WidgetSetPosition pictstr.PICT_win px py;
        SO3WidgetSetSize pictstr.PICT_win pw ph;
      );
    );
  );
  0;;


fun cbSetSize(inst, from, action, param, reply, pictstr)=
  if param == nil then nil else
  let strextr param -> lp in
  let (nth_list (hd lp) 0) -> sx in
  let (nth_list (hd lp) 1) -> sy in
  let V3DgetViewSize (V3DgetSessionView c3dXsession) -> [vw vh] in
  (
    let 0 -> wpercent in
    let if (!strcmp "%" (substr sx ((strlen sx) - 1) 1)) then
        (
          set wpercent = 1;
          atoi sx;
        )
        else
          atoi sx
    -> px in
    let 0 -> hpercent in
    let if (!strcmp "%" (substr sy ((strlen sy) - 1) 1)) then
        (
          set hpercent = 1;
          atoi sy;
        )
        else
          atoi sy
    -> py in
    let [(if px == nil then 0 else px) (if py == nil then 0 else py)] -> [px py] in
    (
      mutate pictstr.PICT_tPercent <- [_ _ wpercent hpercent _ _ _ _];
      set pictstr.PICT_iWidth = px;
      set pictstr.PICT_iHeight = py;
      
      let computePosSize pictstr vw vh -> [px py pw ph] in
      (
        SO3WidgetSetPosition pictstr.PICT_win px py;
        SO3WidgetSetSize pictstr.PICT_win pw ph;
      );
    );
  );
  0;;


fun cbSetOpacity(inst, from, action, param, reply, pictstr)=
  if (param == nil) || (!strcmp "" strtrim param) || ((atoi param) == nil) then nil else
  let atoi param -> opacity in
  (
    set pictstr.PICT_iOpacity = opacity;
    SO3WidgetSetOpacity pictstr.PICT_win (itof pictstr.PICT_iOpacity) *. 0.01;
  );
  0;;


fun cbChangeData(inst, from, action, param, reply, pictstr)=
  if (param == nil) then nil else
  let !strcmpi (substr param 0 1) "Z" -> iszip in
  let (strfindi "_" param 2) -> fp in
  let atoi (substr param 2 fp - 2) -> width in
  let (strfind "_" param fp + 1) -> fp2 in
  let atoi (substr param (fp + 1) (fp2 - fp - 1)) -> height in
  let if !iszip then substr param (fp2 + 1) (strlen param) else unzip substr param (fp2 + 1) (strlen param) -> data in
  let G2DconvertBmpToAlphaBmp _channel (_BTUnCompBitmap data (_FILLbitmap _CRbitmap _channel width height 0)) -> bmp in
  if bmp == nil then nil else
  (
    _DSalphaBitmap pictstr.PICT_AlphaBuffer;
    set pictstr.PICT_AlphaBuffer = bmp;
    
    SO3BitmapWidgetBlitAlpha pictstr.PICT_win pictstr.PICT_AlphaBuffer;
	
	//blitTerminal pictstr.PICT_fontMatrix pictstr;
	//_fooS strcat "blitBlt terminal:" "changed data\n";
  );
  0;;


fun cbChange(inst, from, action, param, reply, pictstr)=
  let if param == nil then pictstr.PICT_bUrl else strIsUrl param -> isurl in
  let if param == nil then pictstr.PICT_sPath else param -> url in
  if !isurl then
  (
    let G2DloadAlphaBmp _channel url -> bmp in
    if bmp == nil then nil else
    (
      _DSalphaBitmap pictstr.PICT_AlphaBuffer;
      set pictstr.PICT_AlphaBuffer = bmp;
      
      SO3BitmapWidgetBlitAlpha pictstr.PICT_win pictstr.PICT_AlphaBuffer;
	  
	  //blitTerminal pictstr.PICT_fontMatrix pictstr;
	  //_fooS strcat "blitBlt terminal:" "change\n";
    );
    0;
  )
  else
  (
    if (pictstr.PICT_httpReq == nil) then nil else
    (
      killHttpRequest pictstr.PICT_httpReq;
      set pictstr.PICT_httpReq = nil;
    );
      
    set pictstr.PICT_httpReq = downloadFile url mkfun3 @cbDownloaded pictstr;
    0;
  );
  0;;


// Destroy instance
fun deleteOb(inst, pictstr)=
  setPluginInstanceCbScenePreRender inst nil;
  if (pictstr.PICT_httpReq == nil) then nil else
  (
    killHttpRequest pictstr.PICT_httpReq;
    set pictstr.PICT_httpReq = nil;
  );
  0;;
  
  
/**** CODDE FROM INTERFACE->BUTTON  
fun drawLabel(abmp, btnstr)=
  let _GETalphaBitmaps abmp -> [bmp bmp8] in
  let _GETbitmapSize bmp -> [bw bh] in
  
  if (_platform != SCOL_PLATFORM_WINDOWS) then
  (
    _BTDRAWtextAlphaBitmap abmp btnstr.PBTN_cvfont [bw/2 bh/2] BT_TEXT_HORIZ_CENTERED|BT_TEXT_VERT_CENTER btnstr.PBTN_ifColor 255 btnstr.PBTN_sLabel;
    0;
  )
  else
  (
    let G2DgetStringSize btnstr.PBTN_font btnstr.PBTN_sLabel -> [_ th] in
    (
      _DRAWtext bmp btnstr.PBTN_font (bw / 2) ((bh / 2) - (th / 2)) TD_CENTER btnstr.PBTN_ifColor btnstr.PBTN_sLabel;
      _DRAWtext8 bmp8 btnstr.PBTN_font (bw / 2) ((bh / 2) - (th / 2)) TD_CENTER 0xffffff btnstr.PBTN_sLabel;
    );
    0;
  );
  0;;  
  
*/  
  

fun cbNewOb(inst)=
  let (getPluginInstanceParam inst "object") -> objname in
  let (getPluginInstanceParam inst "material") -> matname in
  let atoi (getPluginInstanceParam inst "technique") -> technique in
  let if (technique == nil) || (technique < 0) then 0 else technique -> technique in
  let atoi (getPluginInstanceParam inst "pass") -> pass in
  let if (pass == nil) || (pass < 0) then 0 else pass -> pass in
  let atoi (getPluginInstanceParam inst "texture") -> texture in
  let if (texture == nil) || (texture < 0) then 0 else texture -> texture in
  let atoi (getPluginInstanceParam inst "istexture") -> istexture in
  let if istexture == nil then 0 else istexture -> istexture in
  
  let (getPluginInstanceParam inst "path") -> path in
  let atoi (getPluginInstanceParam inst "isurl") -> isurl in
  let if isurl == nil then 0 else isurl -> isurl in
  let (getPluginInstanceParam inst "url") -> url in      
  
  let (getPluginInstanceParam inst "imgpath") -> imgpath in
  let atoi (getPluginInstanceParam inst "isimgurl") -> isimgurl in
  let if isimgurl == nil then 0 else isimgurl -> isimgurl in
  let (getPluginInstanceParam inst "imgurl") -> imgurl in    

  let (getPluginInstanceParam inst "fontpath") -> fontpath in
  let atoi (getPluginInstanceParam inst "isfonturl") -> isfonturl in
  let if isfonturl == nil then 0 else isfonturl -> isfonturl in
  let (getPluginInstanceParam inst "fonturl") -> fonturl in      
  
  let atoi (getPluginInstanceParam inst "xpercent") -> xpercent in
  let if xpercent == nil then 0 else xpercent -> xpercent in
  let atoi (getPluginInstanceParam inst "xalign") -> xalign in
  let if xalign == nil then 0 else xalign -> xalign in
  let atoi (getPluginInstanceParam inst "posx") -> posx in
  let if posx == nil then 0 else posx -> posx in
  let atoi (getPluginInstanceParam inst "ypercent") -> ypercent in
  let if ypercent == nil then 0 else ypercent -> ypercent in
  let atoi (getPluginInstanceParam inst "yalign") -> yalign in
  let if yalign == nil then 0 else yalign -> yalign in
  let atoi (getPluginInstanceParam inst "posy") -> posy in
  let if posy == nil then 0 else posy -> posy in
  let atoi (getPluginInstanceParam inst "wpercent") -> wpercent in
  let if wpercent == nil then 1 else wpercent -> wpercent in
  let atoi (getPluginInstanceParam inst "width") -> width in
  let if width == nil then 100 else width -> width in
  let atoi (getPluginInstanceParam inst "hpercent") -> hpercent in
  let if hpercent == nil then 1 else hpercent -> hpercent in
  let atoi (getPluginInstanceParam inst "xoffset") -> xoffset in
  let if xoffset == nil then 0 else xoffset -> xoffset in
  let atoi (getPluginInstanceParam inst "yoffset") -> yoffset in
  let if yoffset == nil then 0 else yoffset -> yoffset in
  let atoi (getPluginInstanceParam inst "woffset") -> woffset in
  let if woffset == nil then 0 else woffset -> woffset in
  let atoi (getPluginInstanceParam inst "hoffset") -> hoffset in
  let if hoffset == nil then 0 else hoffset -> hoffset in
  let atoi (getPluginInstanceParam inst "height") -> height in
  let if height == nil then 100 else height -> height in
  
  let atoi (getPluginInstanceParam inst "background") -> background in
  let if (background == nil) then 1 else background -> background in
  
  let getPluginInstanceParam inst "fontname" -> fname in
  let if fname == nil then "Arial" else fname -> fname in
  let atoi (getPluginInstanceParam inst "fontcolor") -> fcolor in
  let if fcolor == nil then 0 else fcolor -> fcolor in
  let atoi (getPluginInstanceParam inst "fontsize") -> fsize in
  let if fsize == nil then 12 else fsize -> fsize in
  let atoi (getPluginInstanceParam inst "fontbold") -> fbold in
  let if fbold == nil then 0 else fbold -> fbold in
  let getPluginInstanceParam inst "label" -> label in
  let if label == nil then "" else label -> label in
  let G2DcrFont _channel fsize 0 FF_PIXEL|(if fbold then FF_WEIGHT else 0) fname -> font in
  let _CRBTfont _channel fname fsize (BT_FONT_ANTIALIAS | (if fbold then BT_FONT_BOLD else 0)) 1.0 -> cv_font in  
  
  let atoi (getPluginInstanceParam inst "opacity") -> opacity in
  let if opacity == nil then 100 else opacity -> opacity in
  let atoi (getPluginInstanceParam inst "transition") -> transition in
  let if transition == nil then 0 else transition -> transition in
    
  let atoi (getPluginInstanceParam inst "transparency") -> trans in
  let if (trans == nil) then 0 else trans -> trans in
  
  let atoi (getPluginInstanceParam inst "show") -> show in
  let if (show == nil) then 1 else show -> show in
  let if !isurl then path else url -> file in

  let SO3SceneGetObject (V3DgetSession c3dXsession) objname -> obj in
  let if !istexture then nil else SO3SceneGetMaterial (V3DgetSession c3dXsession) (SO3EntityGetResourceGroup obj) matname -> mat in
  let MkPlugPicture [inst istexture mat 12 180 30 nil nil posx posy width height [xpercent ypercent wpercent hpercent xoffset yoffset woffset hoffset] [xalign yalign] trans opacity transition 0.0 font cv_font label fcolor isurl file background show nil nil nil nil 0] -> pictstr in
  (
    createPicture inst pictstr;

    createTerminal inst pictstr;		
    
    if pictstr.PICT_bOnMaterial then nil else
      setPluginInstanceCbResizeView inst mkfun5 @cbResizeCtrl pictstr;
	  setPluginInstanceCbClick inst mkfun6 @cb3dClick pictstr;         /*add click callback */
	  //setPluginInstanceCbDbClick inst mkfun6 @cb3dDbClick pictstr;     /*add db click callback */
    
      if !pictstr.PICT_bUrl then
      (
        let G2DloadAlphaBmp _channel pictstr.PICT_sPath -> bmp in
        if bmp == nil then nil else
        (
          set pictstr.PICT_AlphaBuffer = bmp;
          
          SO3BitmapWidgetBlitAlpha pictstr.PICT_win pictstr.PICT_AlphaBuffer;
		  
		  //blitTerminal pictstr.PICT_fontMatrix pictstr; 
		  //_fooS strcat "blitBlt Terminal:" "init\n";
        );
        0;
      )
      else
      (
        set pictstr.PICT_httpReq = downloadFile pictstr.PICT_sPath mkfun3 @cbDownloaded pictstr;
        0;
      );
    
    if pictstr.PICT_bShow then
      cbShow inst nil nil nil nil pictstr
    else
      cbHide inst nil nil nil nil pictstr;
    
    PluginRegisterAction inst "Show" mkfun6 @cbShow pictstr;
    PluginRegisterAction inst "Hide" mkfun6 @cbHide pictstr;
    PluginRegisterAction inst "Change" mkfun6 @cbChange pictstr;
    PluginRegisterAction inst "Change data" mkfun6 @cbChangeData pictstr;
    PluginRegisterAction inst "Set position" mkfun6 @cbSetPosition pictstr;
    PluginRegisterAction inst "Set size" mkfun6 @cbSetSize pictstr;
    PluginRegisterAction inst "Set opacity" mkfun6 @cbSetOpacity pictstr;
	
	PluginRegisterAction inst "writeTerminal" mkfun6 @cbWriteTerminal pictstr;	
	PluginRegisterAction inst "clsTerminal" mkfun6 @cbClsTerminal pictstr;		
	
  	setPluginInstanceCbDel inst mkfun2 @deleteOb pictstr;   
	
	
	SendPluginEvent inst "started" nil nil;
  );
  0;;


fun IniPlug(file) =
  PlugRegister @cbNewOb nil;
  setPluginEditor @dynamicedit;
  0;;